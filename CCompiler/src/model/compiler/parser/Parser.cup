package model.compiler.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import model.compiler.scanner.Token;
import model.compiler.translator.Translator;

parser code
{:

    public ArrayList<Token> errors = new ArrayList<>();
    public Translator tl = new Translator();

    public void syntax_error(Symbol cur_token){
        errors.add(new Token(cur_token.sym, cur_token.right, cur_token.left, cur_token.value));
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        errors.add(new Token(cur_token.sym, cur_token.right, cur_token.left, cur_token.value));
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
:};

terminal     
    KEY_AUTO,    
    KEY_BREAK,    
    KEY_CASE,  
    KEY_CHAR,
    KEY_CONST,            
    KEY_CONT,        
    KEY_DEF,        
    KEY_DO,        
    KEY_DOUBLE,        
    KEY_ELSE,        
    KEY_ENUM,         
    KEY_EXT,         
    KEY_FLOAT,         
    KEY_FOR,         
    KEY_GOTO,         
    KEY_IF,         
    KEY_INT,         
    KEY_LONG,         
    KEY_REG,         
    KEY_RET,         
    KEY_SHORT,         
    KEY_SIG,         
    KEY_SIZEOF,         
    KEY_STATIC,         
    KEY_STRUCT,         
    KEY_SWITCH,         
    KEY_TYPEDEF,         
    KEY_UNION,         
    KEY_UNSIG,         
    KEY_VOID,         
    KEY_VOL,         
    KEY_WHILE,         
    KEY_READ,         
    KEY_WRITE,         
    ID,         
    FLOAT,             
    INT,             
    CHAR,             
    STRING,             
    OP_COMA,             
    OP_SEMICOL,             
    OP_QUEST,             
    OP_ASSIGN,             
    OP_PAR_OPEN,             
    OP_PAR_CLOSE,             
    OP_BRACK_OPEN,             
    OP_BRACK_CLOSE,             
    OP_BRACE_OPEN,            
    OP_BRACE_CLOSE,             
    OP_COLON,             
    OP_DOT,             
    OP_ARROW,             
    OP_INC,             
    OP_DEC,             
    OP_ADD,             
    OP_SUB,             
    OP_MULT,             
    OP_DIV,             
    OP_MOD,             
    OP_ADD_ASS,             
    OP_SUB_ASS,             
    OP_MULT_ASS,             
    OP_DIV_ASS,             
    OP_MOD_ASS,             
    OP_EQUAL,             
    OP_GRE_EQ,             
    OP_GREATER,             
    OP_LESS,             
    OP_LESS_EQ,             
    OP_NOT_EQ,             
    OP_OR,             
    OP_AND,             
    OP_NOT,             
    OP_BITAND,             
    OP_BITOR,             
    OP_BITAND_ASS,             
    OP_BITOR_ASS,             
    OP_RSHIFT,     
    OP_LSHIFT,             
    OP_BITOREXC,             
    OP_BITOREXC_ASS,             
    OP_BITCOMPL,             
    OP_RSHIFT_ASS,             
    OP_LSHIFT_ASS,             
    LEX_ERROR 
;

non terminal
    innit,
    key_types,
    const_declaration,
    variable_declaration,
    declaration,
    functions_block,
    function_statement,
    parameter,
    parameters,
    add_parameter,
    expression,
    arithmetic_operator,
    logic_operator,
    operand,
    postfix_operator,
    unary_operator ,
    body,
    block_statement,
    statement,
    expression_statement,
    assignment_expression,
    assignment_operator,
    function_body,
    read_statement,
    write_statement,
    write_parameters,
    write_parameters_list,
    if_statement,
    else_statement,
    for_statement,
    for_expression_statement,
    while_statement,
    switch_statement,
    case_blocks,
    case,
    default,
    return_statement,
    add_id,
    call_function_statement,
    input_parameters,
    add_input_parameter
;

precedence left OP_OR;
precedence left OP_AND;
precedence left OP_EQUAL, OP_NOT_EQ;
precedence left OP_GRE_EQ, OP_GREATER, OP_LESS, OP_LESS_EQ;
precedence left OP_ADD, OP_SUB;
precedence left OP_MULT, OP_DIV, OP_MOD;
precedence right OP_NOT, OP_ADD, OP_SUB, OP_DEC, OP_INC;
precedence left OP_INC, OP_DEC;

start with innit;

key_types ::=
    KEY_INT:e {:tl.rememberType(e, eright, eleft);:}
    | KEY_VOID:e {:tl.rememberType(e, eright, eleft);:}
    | KEY_CHAR:e {:tl.rememberType(e, eright, eleft);:}
    | KEY_LONG:e {:tl.rememberType(e, eright, eleft);:}
    | KEY_SHORT:e {:tl.rememberType(e, eright, eleft);:}
    | KEY_FLOAT:e {:tl.rememberType(e, eright, eleft);:}
;  

innit ::=
    body
;

body ::=
    declaration OP_SEMICOL body
    | error OP_SEMICOL body
    | functions_block
;

declaration ::=
    variable_declaration
    | const_declaration
;

variable_declaration ::=
    key_types ID:e {:tl.rememberId(e, eright, eleft);:} add_id {:tl.insertSymbolTable();:}
;

add_id ::=
    OP_COMA ID:e {:tl.rememberId(e, eright, eleft);:} add_id
    |
;

const_declaration::=
    KEY_CONST key_types ID:e {:tl.rememberId(e, eright, eleft);:} add_id {:tl.insertSymbolTable();:} OP_ASSIGN expression
;

functions_block ::=
    function_statement 
    | function_statement functions_block
;

function_statement ::=
    key_types ID OP_PAR_OPEN parameters OP_PAR_CLOSE OP_BRACE_OPEN function_body OP_BRACE_CLOSE
    | key_types ID OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN function_body OP_BRACE_CLOSE
    | key_types ID OP_PAR_OPEN error OP_BRACE_OPEN function_body OP_BRACE_CLOSE
    | key_types ID OP_PAR_OPEN error function_body OP_BRACE_CLOSE
;

function_body ::= 
    declaration OP_SEMICOL function_body
    | block_statement
;

parameter ::=
    key_types ID
;

parameters ::=
    parameter add_parameter
    | 
; 

add_parameter ::=
    OP_COMA parameter add_parameter
    |
;

expression ::=
    expression arithmetic_operator expression
    | expression logic_operator expression
    | OP_PAR_OPEN expression OP_PAR_CLOSE
    | ID postfix_operator 
    | postfix_operator ID
    | unary_operator expression
    | operand
;

operand ::=
    ID
    | INT
    | CHAR
    | call_function_statement
;

arithmetic_operator ::=
    OP_ADD             
    | OP_SUB             
    | OP_MULT             
    | OP_DIV             
    | OP_MOD
;

logic_operator ::=
     OP_EQUAL
    | OP_GRE_EQ
    | OP_GREATER
    | OP_LESS
    | OP_LESS_EQ
    | OP_NOT_EQ 
    | OP_OR            
    | OP_AND
;

postfix_operator ::=
    OP_INC
    | OP_DEC
;

unary_operator ::=
    OP_NOT
    | OP_ADD
    | OP_SUB
;


block_statement ::=
    statement block_statement
    |
;

statement ::=
    expression_statement OP_SEMICOL
    | read_statement OP_SEMICOL 
    | write_statement OP_SEMICOL 
    | KEY_BREAK OP_SEMICOL
    | KEY_CONT OP_SEMICOL
    | return_statement OP_SEMICOL
    | if_statement 
    | for_statement
    | while_statement
    | switch_statement
;

expression_statement ::=
    expression
    | assignment_expression
;

assignment_expression ::=
    ID assignment_operator expression
;

assignment_operator ::=
    OP_ADD_ASS             
    | OP_SUB_ASS             
    | OP_MULT_ASS             
    | OP_DIV_ASS             
    | OP_ASSIGN
;

read_statement ::=
    KEY_READ OP_PAR_OPEN ID OP_PAR_CLOSE
    | KEY_READ OP_PAR_OPEN OP_PAR_CLOSE
    | KEY_READ OP_PAR_OPEN error OP_PAR_CLOSE
;

write_statement ::=
    KEY_WRITE OP_PAR_OPEN write_parameters OP_PAR_CLOSE
    | KEY_WRITE OP_PAR_OPEN error OP_PAR_CLOSE
;

write_parameters ::=
    expression_statement write_parameters_list
; 

write_parameters_list ::=
    OP_COMA expression_statement write_parameters_list
    |
;


if_statement ::=
    KEY_IF OP_PAR_OPEN expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement
    | KEY_IF OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement
    | KEY_IF OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement
    | KEY_IF OP_PAR_OPEN error block_statement OP_BRACE_CLOSE else_statement
;

else_statement ::= 
    KEY_ELSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE
    | KEY_ELSE error block_statement OP_BRACE_CLOSE
    |
;

for_statement ::= 
    KEY_FOR OP_PAR_OPEN for_expression_statement OP_SEMICOL for_expression_statement OP_SEMICOL for_expression_statement OP_PAR_CLOSE 
        OP_BRACE_OPEN block_statement OP_BRACE_CLOSE
    | KEY_FOR OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE
    | KEY_FOR OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE
    | KEY_FOR OP_PAR_OPEN error block_statement OP_BRACE_CLOSE

;

for_expression_statement ::=
    expression_statement
    | key_types ID OP_ASSIGN expression         
    |
;

while_statement ::= 
    KEY_WHILE OP_PAR_OPEN expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE  
    | KEY_WHILE OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE
    | KEY_WHILE OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE  
    | KEY_WHILE OP_PAR_OPEN error block_statement OP_BRACE_CLOSE
;

switch_statement ::=
    KEY_SWITCH OP_PAR_OPEN ID OP_PAR_CLOSE OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE
    | KEY_SWITCH OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE
    | KEY_SWITCH OP_PAR_OPEN error OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE
    | KEY_SWITCH OP_PAR_OPEN error case_blocks OP_BRACE_CLOSE
;

case_blocks ::=
    case case_blocks
    | default 
    | 
;

case ::=
    KEY_CASE INT OP_COLON block_statement
    | KEY_CASE INT OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE
    | KEY_CASE error OP_COLON block_statement
    | KEY_CASE error OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE
;

default ::=
    KEY_DEF OP_COLON block_statement
    | KEY_DEF OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE
    | KEY_DEF error OP_COLON block_statement
    | KEY_DEF error OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE
;

return_statement ::= 
    KEY_RET expression_statement
    | KEY_RET
;

call_function_statement ::=
    ID OP_PAR_OPEN input_parameters OP_PAR_CLOSE
    | ID OP_PAR_OPEN error OP_PAR_CLOSE
;

input_parameters ::=
    expression_statement add_input_parameter
    | 
; 

add_input_parameter ::=
    OP_COMA expression_statement add_input_parameter
    |
;

