
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package model.compiler.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import model.compiler.scanner.Token;
import model.compiler.translator.Translator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\002\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\003\000\002\006\003\000\002" +
    "\006\003\000\002\053\002\000\002\005\006\000\002\054" +
    "\002\000\002\047\006\000\002\047\002\000\002\055\002" +
    "\000\002\056\002\000\002\004\012\000\002\007\003\000" +
    "\002\007\004\000\002\057\002\000\002\060\002\000\002" +
    "\010\014\000\002\010\012\000\002\010\011\000\002\010" +
    "\010\000\002\030\005\000\002\030\003\000\002\011\004" +
    "\000\002\012\004\000\002\012\002\000\002\013\005\000" +
    "\002\013\002\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\023\004\000\002\023\002\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\003\000\002\025\003\000\002\061\002\000\002\026" +
    "\006\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\031\006\000" +
    "\002\031\005\000\002\031\006\000\002\032\006\000\002" +
    "\032\006\000\002\033\004\000\002\034\005\000\002\034" +
    "\002\000\002\035\012\000\002\035\012\000\002\035\011" +
    "\000\002\035\010\000\002\036\006\000\002\036\006\000" +
    "\002\036\002\000\002\037\015\000\002\037\011\000\002" +
    "\037\010\000\002\037\007\000\002\040\003\000\002\040" +
    "\006\000\002\040\002\000\002\041\011\000\002\041\011" +
    "\000\002\041\010\000\002\041\007\000\002\042\011\000" +
    "\002\042\011\000\002\042\010\000\002\042\007\000\002" +
    "\043\004\000\002\043\003\000\002\043\002\000\002\044" +
    "\006\000\002\044\010\000\002\044\006\000\002\044\010" +
    "\000\002\045\005\000\002\045\007\000\002\045\006\000" +
    "\002\045\010\000\002\046\004\000\002\046\003\000\002" +
    "\050\006\000\002\050\006\000\002\051\004\000\002\051" +
    "\002\000\002\052\005\000\002\052\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0118\000\022\003\017\007\023\010\011\020\012\024" +
    "\006\025\004\030\010\041\007\001\002\000\004\046\ufffd" +
    "\001\002\000\004\054\u0119\001\002\000\004\046\000\001" +
    "\002\000\004\046\uffff\001\002\000\004\046\ufffc\001\002" +
    "\000\016\007\023\020\012\024\006\025\004\030\010\041" +
    "\007\001\002\000\004\046\ufffb\001\002\000\004\054\ufff5" +
    "\001\002\000\004\002\u0111\001\002\000\004\002\ufffa\001" +
    "\002\000\004\046\u0110\001\002\000\004\054\u010e\001\002" +
    "\000\020\002\uffec\007\023\020\012\024\006\025\004\030" +
    "\010\041\007\001\002\000\004\002\ufff7\001\002\000\004" +
    "\054\ufff6\001\002\000\004\046\ufffe\001\002\000\004\046" +
    "\026\001\002\000\004\002\uffeb\001\002\000\004\057\027" +
    "\001\002\000\022\003\030\007\uffea\020\uffea\024\uffea\025" +
    "\uffea\030\uffea\041\uffea\060\uffea\001\002\000\072\005\046" +
    "\007\023\010\011\011\104\020\012\021\065\023\075\024" +
    "\006\025\004\027\062\030\010\035\076\041\007\043\055" +
    "\044\066\045\101\046\057\050\047\051\042\057\044\060" +
    "\u0107\063\u0106\064\uffbf\070\051\071\074\072\056\073\100" +
    "\114\045\001\002\000\020\007\023\020\012\024\006\025" +
    "\004\030\010\041\007\060\uffe0\001\002\000\004\046\u0104" +
    "\001\002\000\006\053\u0101\060\uffde\001\002\000\004\060" +
    "\035\001\002\000\004\063\uffe9\001\002\000\004\063\037" +
    "\001\002\000\066\005\046\007\023\010\011\011\104\020" +
    "\012\021\065\023\075\024\006\025\004\027\062\030\010" +
    "\035\076\041\007\043\055\044\066\045\101\046\057\050" +
    "\047\051\042\057\044\064\uffbf\070\051\071\074\072\056" +
    "\073\100\114\045\001\002\000\042\053\uffd7\054\uffd7\060" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\104\uffd7" +
    "\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7\113" +
    "\uffd7\001\002\000\004\054\377\001\002\000\042\053\uffd4" +
    "\054\uffd4\060\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076" +
    "\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4" +
    "\112\uffd4\113\uffd4\001\002\000\054\005\uffb5\006\uffb5\011" +
    "\uffb5\012\uffb5\021\uffb5\023\uffb5\027\uffb5\035\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5\057\uffb5\064" +
    "\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\114\uffb5\001\002" +
    "\000\024\046\107\050\047\051\042\057\044\070\051\071" +
    "\074\072\056\073\100\114\045\001\002\000\024\046\uffc3" +
    "\050\uffc3\051\uffc3\057\uffc3\070\uffc3\071\uffc3\072\uffc3\073" +
    "\uffc3\114\uffc3\001\002\000\004\054\374\001\002\000\042" +
    "\053\uffd5\054\uffd5\060\uffd5\072\uffd5\073\uffd5\074\uffd5\075" +
    "\uffd5\076\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5" +
    "\111\uffd5\112\uffd5\113\uffd5\001\002\000\004\064\373\001" +
    "\002\000\044\046\uffc5\053\uffc5\054\uffc5\060\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\076\uffc5\104\uffc5\105\uffc5\106" +
    "\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\001\002" +
    "\000\054\005\uffb7\006\uffb7\011\uffb7\012\uffb7\021\uffb7\023" +
    "\uffb7\027\uffb7\035\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\050\uffb7\051\uffb7\057\uffb7\064\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\114\uffb7\001\002\000\054\005\uffb8\006\uffb8" +
    "\011\uffb8\012\uffb8\021\uffb8\023\uffb8\027\uffb8\035\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\057\uffb8" +
    "\064\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\114\uffb8\001" +
    "\002\000\004\054\372\001\002\000\004\057\352\001\002" +
    "\000\024\046\uffc2\050\uffc2\051\uffc2\057\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\114\uffc2\001\002\000\062\053\uffd6" +
    "\054\uffd6\056\uffb2\057\110\060\uffd6\070\051\071\074\072" +
    "\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffb2\100\uffb2" +
    "\101\uffb2\102\uffb2\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110" +
    "\uffd6\111\uffd6\112\uffd6\113\uffd6\001\002\000\042\053\uffb4" +
    "\054\uffb4\060\uffb4\072\124\073\126\074\130\075\127\076" +
    "\141\104\137\105\123\106\133\107\135\110\132\111\131" +
    "\112\140\113\134\001\002\000\054\005\046\006\uffbf\011" +
    "\104\012\uffbf\021\065\023\075\027\062\035\076\043\055" +
    "\044\066\045\101\046\057\050\047\051\042\057\044\064" +
    "\uffbf\070\051\071\074\072\056\073\100\114\045\001\002" +
    "\000\026\046\057\050\047\051\042\054\uff81\057\044\070" +
    "\051\071\074\072\056\073\100\114\045\001\002\000\004" +
    "\054\337\001\002\000\004\046\330\001\002\000\004\057" +
    "\277\001\002\000\004\057\271\001\002\000\042\053\uffd3" +
    "\054\uffd3\060\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3" +
    "\112\uffd3\113\uffd3\001\002\000\010\053\uffb3\054\uffb3\060" +
    "\uffb3\001\002\000\054\005\uffb6\006\uffb6\011\uffb6\012\uffb6" +
    "\021\uffb6\023\uffb6\027\uffb6\035\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\050\uffb6\051\uffb6\057\uffb6\064\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\114\uffb6\001\002\000\004\046" +
    "\270\001\002\000\004\064\uffe3\001\002\000\044\046\uffc4" +
    "\053\uffc4\054\uffc4\060\uffc4\072\uffc4\073\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4" +
    "\111\uffc4\112\uffc4\113\uffc4\001\002\000\004\057\235\001" +
    "\002\000\004\057\161\001\002\000\004\054\160\001\002" +
    "\000\024\046\uffc1\050\uffc1\051\uffc1\057\uffc1\070\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\114\uffc1\001\002\000\004\057\146" +
    "\001\002\000\004\054\144\001\002\000\024\046\107\050" +
    "\047\051\042\057\044\070\051\071\074\072\056\073\100" +
    "\114\045\001\002\000\004\054\105\001\002\000\054\005" +
    "\uffba\006\uffba\011\uffba\012\uffba\021\uffba\023\uffba\027\uffba" +
    "\035\uffba\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba\051" +
    "\uffba\057\uffba\064\uffba\070\uffba\071\uffba\072\uffba\073\uffba" +
    "\114\uffba\001\002\000\042\053\uffd8\054\uffd8\060\uffd8\072" +
    "\124\073\126\074\130\075\127\076\141\104\137\105\123" +
    "\106\133\107\135\110\132\111\131\112\140\113\134\001" +
    "\002\000\050\053\uffd6\054\uffd6\057\110\060\uffd6\070\051" +
    "\071\074\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\104" +
    "\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111\uffd6\112\uffd6" +
    "\113\uffd6\001\002\000\030\003\114\046\057\050\047\051" +
    "\042\057\044\060\uff7d\070\051\071\074\072\056\073\100" +
    "\114\045\001\002\000\042\053\uffda\054\uffda\060\uffda\072" +
    "\uffda\073\uffda\074\uffda\075\uffda\076\uffda\104\uffda\105\uffda" +
    "\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda\001" +
    "\002\000\004\060\122\001\002\000\006\053\117\060\uff7b" +
    "\001\002\000\004\060\115\001\002\000\042\053\uff7f\054" +
    "\uff7f\060\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f" +
    "\104\uff7f\105\uff7f\106\uff7f\107\uff7f\110\uff7f\111\uff7f\112" +
    "\uff7f\113\uff7f\001\002\000\004\060\uff7e\001\002\000\024" +
    "\046\057\050\047\051\042\057\044\070\051\071\074\072" +
    "\056\073\100\114\045\001\002\000\006\053\117\060\uff7b" +
    "\001\002\000\004\060\uff7c\001\002\000\042\053\uff80\054" +
    "\uff80\060\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80" +
    "\104\uff80\105\uff80\106\uff80\107\uff80\110\uff80\111\uff80\112" +
    "\uff80\113\uff80\001\002\000\024\046\uffcc\050\uffcc\051\uffcc" +
    "\057\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\114\uffcc\001" +
    "\002\000\024\046\uffd2\050\uffd2\051\uffd2\057\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\114\uffd2\001\002\000\024\046" +
    "\107\050\047\051\042\057\044\070\051\071\074\072\056" +
    "\073\100\114\045\001\002\000\024\046\uffd1\050\uffd1\051" +
    "\uffd1\057\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\114\uffd1" +
    "\001\002\000\024\046\uffcf\050\uffcf\051\uffcf\057\uffcf\070" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\114\uffcf\001\002\000\024" +
    "\046\uffd0\050\uffd0\051\uffd0\057\uffd0\070\uffd0\071\uffd0\072" +
    "\uffd0\073\uffd0\114\uffd0\001\002\000\024\046\uffc8\050\uffc8" +
    "\051\uffc8\057\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\114" +
    "\uffc8\001\002\000\024\046\uffc9\050\uffc9\051\uffc9\057\uffc9" +
    "\070\uffc9\071\uffc9\072\uffc9\073\uffc9\114\uffc9\001\002\000" +
    "\024\046\uffcb\050\uffcb\051\uffcb\057\uffcb\070\uffcb\071\uffcb" +
    "\072\uffcb\073\uffcb\114\uffcb\001\002\000\024\046\uffc6\050" +
    "\uffc6\051\uffc6\057\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\114\uffc6\001\002\000\024\046\uffca\050\uffca\051\uffca\057" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\114\uffca\001\002" +
    "\000\024\046\107\050\047\051\042\057\044\070\051\071" +
    "\074\072\056\073\100\114\045\001\002\000\024\046\uffcd" +
    "\050\uffcd\051\uffcd\057\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\114\uffcd\001\002\000\024\046\uffc7\050\uffc7\051\uffc7" +
    "\057\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\114\uffc7\001" +
    "\002\000\024\046\uffce\050\uffce\051\uffce\057\uffce\070\uffce" +
    "\071\uffce\072\uffce\073\uffce\114\uffce\001\002\000\042\053" +
    "\uffdc\054\uffdc\060\uffdc\072\124\073\126\074\130\075\127" +
    "\076\141\104\137\105\123\106\133\107\135\110\132\111" +
    "\131\112\140\113\134\001\002\000\042\053\uffdd\054\uffdd" +
    "\060\uffdd\072\124\073\126\074\130\075\127\076\141\104" +
    "\137\105\123\106\133\107\135\110\132\111\131\112\140" +
    "\113\134\001\002\000\066\005\046\007\023\010\011\011" +
    "\104\020\012\021\065\023\075\024\006\025\004\027\062" +
    "\030\010\035\076\041\007\043\055\044\066\045\101\046" +
    "\057\050\047\051\042\057\044\064\uffbf\070\051\071\074" +
    "\072\056\073\100\114\045\001\002\000\004\064\uffe4\001" +
    "\002\000\026\003\151\046\057\050\047\051\042\057\044" +
    "\070\051\071\074\072\056\073\100\114\045\001\002\000" +
    "\004\060\157\001\002\000\006\053\154\060\uffa4\001\002" +
    "\000\004\060\152\001\002\000\004\054\uffa7\001\002\000" +
    "\004\060\uffa6\001\002\000\024\046\057\050\047\051\042" +
    "\057\044\070\051\071\074\072\056\073\100\114\045\001" +
    "\002\000\006\053\154\060\uffa4\001\002\000\004\060\uffa5" +
    "\001\002\000\004\054\uffa8\001\002\000\054\005\uffbe\006" +
    "\uffbe\011\uffbe\012\uffbe\021\uffbe\023\uffbe\027\uffbe\035\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\057" +
    "\uffbe\064\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\114\uffbe" +
    "\001\002\000\006\003\163\046\162\001\002\000\004\060" +
    "\231\001\002\000\014\006\172\012\165\060\164\063\166" +
    "\064\uff8b\001\002\000\004\063\226\001\002\000\006\003" +
    "\213\065\214\001\002\000\010\006\172\012\165\064\uff8b" +
    "\001\002\000\004\064\uff8c\001\002\000\010\006\172\012" +
    "\165\064\uff8b\001\002\000\004\064\207\001\002\000\006" +
    "\003\173\050\174\001\002\000\004\065\202\001\002\000" +
    "\004\065\175\001\002\000\056\005\046\006\uffbf\011\104" +
    "\012\uffbf\021\065\023\075\027\062\035\076\043\055\044" +
    "\066\045\101\046\057\050\047\051\042\057\044\063\176" +
    "\064\uffbf\070\051\071\074\072\056\073\100\114\045\001" +
    "\002\000\050\005\046\011\104\021\065\023\075\027\062" +
    "\035\076\043\055\044\066\045\101\046\057\050\047\051" +
    "\042\057\044\064\uffbf\070\051\071\074\072\056\073\100" +
    "\114\045\001\002\000\010\006\uff8a\012\uff8a\064\uff8a\001" +
    "\002\000\004\064\201\001\002\000\010\006\uff89\012\uff89" +
    "\064\uff89\001\002\000\056\005\046\006\uffbf\011\104\012" +
    "\uffbf\021\065\023\075\027\062\035\076\043\055\044\066" +
    "\045\101\046\057\050\047\051\042\057\044\063\203\064" +
    "\uffbf\070\051\071\074\072\056\073\100\114\045\001\002" +
    "\000\050\005\046\011\104\021\065\023\075\027\062\035" +
    "\076\043\055\044\066\045\101\046\057\050\047\051\042" +
    "\057\044\064\uffbf\070\051\071\074\072\056\073\100\114" +
    "\045\001\002\000\010\006\uff88\012\uff88\064\uff88\001\002" +
    "\000\004\064\206\001\002\000\010\006\uff87\012\uff87\064" +
    "\uff87\001\002\000\054\005\uff8e\006\uff8e\011\uff8e\012\uff8e" +
    "\021\uff8e\023\uff8e\027\uff8e\035\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\050\uff8e\051\uff8e\057\uff8e\064\uff8e\070\uff8e" +
    "\071\uff8e\072\uff8e\073\uff8e\114\uff8e\001\002\000\004\064" +
    "\uff8d\001\002\000\004\064\212\001\002\000\054\005\uff8f" +
    "\006\uff8f\011\uff8f\012\uff8f\021\uff8f\023\uff8f\027\uff8f\035" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f" +
    "\057\uff8f\064\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\114" +
    "\uff8f\001\002\000\004\065\221\001\002\000\052\005\046" +
    "\011\104\021\065\023\075\027\062\035\076\043\055\044" +
    "\066\045\101\046\057\050\047\051\042\057\044\063\215" +
    "\064\uffbf\070\051\071\074\072\056\073\100\114\045\001" +
    "\002\000\050\005\046\011\104\021\065\023\075\027\062" +
    "\035\076\043\055\044\066\045\101\046\057\050\047\051" +
    "\042\057\044\064\uffbf\070\051\071\074\072\056\073\100" +
    "\114\045\001\002\000\004\064\uff86\001\002\000\004\064" +
    "\220\001\002\000\004\064\uff85\001\002\000\052\005\046" +
    "\011\104\021\065\023\075\027\062\035\076\043\055\044" +
    "\066\045\101\046\057\050\047\051\042\057\044\063\222" +
    "\064\uffbf\070\051\071\074\072\056\073\100\114\045\001" +
    "\002\000\050\005\046\011\104\021\065\023\075\027\062" +
    "\035\076\043\055\044\066\045\101\046\057\050\047\051" +
    "\042\057\044\064\uffbf\070\051\071\074\072\056\073\100" +
    "\114\045\001\002\000\004\064\uff84\001\002\000\004\064" +
    "\225\001\002\000\004\064\uff83\001\002\000\010\006\172" +
    "\012\165\064\uff8b\001\002\000\004\064\230\001\002\000" +
    "\054\005\uff90\006\uff90\011\uff90\012\uff90\021\uff90\023\uff90" +
    "\027\uff90\035\uff90\043\uff90\044\uff90\045\uff90\046\uff90\050" +
    "\uff90\051\uff90\057\uff90\064\uff90\070\uff90\071\uff90\072\uff90" +
    "\073\uff90\114\uff90\001\002\000\004\063\232\001\002\000" +
    "\010\006\172\012\165\064\uff8b\001\002\000\004\064\234" +
    "\001\002\000\054\005\uff91\006\uff91\011\uff91\012\uff91\021" +
    "\uff91\023\uff91\027\uff91\035\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\050\uff91\051\uff91\057\uff91\064\uff91\070\uff91\071" +
    "\uff91\072\uff91\073\uff91\114\uff91\001\002\000\026\003\236" +
    "\046\057\050\047\051\042\057\044\070\051\071\074\072" +
    "\056\073\100\114\045\001\002\000\054\005\046\011\104" +
    "\021\065\023\075\027\062\035\076\043\055\044\066\045" +
    "\101\046\057\050\047\051\042\057\044\060\255\063\254" +
    "\064\uffbf\070\051\071\074\072\056\073\100\114\045\001" +
    "\002\000\004\060\240\001\002\000\004\063\241\001\002" +
    "\000\050\005\046\011\104\021\065\023\075\027\062\035" +
    "\076\043\055\044\066\045\101\046\057\050\047\051\042" +
    "\057\044\064\uffbf\070\051\071\074\072\056\073\100\114" +
    "\045\001\002\000\004\064\243\001\002\000\056\005\uff9d" +
    "\006\uff9d\011\uff9d\012\uff9d\015\244\021\uff9d\023\uff9d\027" +
    "\uff9d\035\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\050\uff9d" +
    "\051\uff9d\057\uff9d\064\uff9d\070\uff9d\071\uff9d\072\uff9d\073" +
    "\uff9d\114\uff9d\001\002\000\006\003\247\063\246\001\002" +
    "\000\054\005\uffa3\006\uffa3\011\uffa3\012\uffa3\021\uffa3\023" +
    "\uffa3\027\uffa3\035\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\050\uffa3\051\uffa3\057\uffa3\064\uffa3\070\uffa3\071\uffa3\072" +
    "\uffa3\073\uffa3\114\uffa3\001\002\000\050\005\046\011\104" +
    "\021\065\023\075\027\062\035\076\043\055\044\066\045" +
    "\101\046\057\050\047\051\042\057\044\064\uffbf\070\051" +
    "\071\074\072\056\073\100\114\045\001\002\000\050\005" +
    "\046\011\104\021\065\023\075\027\062\035\076\043\055" +
    "\044\066\045\101\046\057\050\047\051\042\057\044\064" +
    "\uffbf\070\051\071\074\072\056\073\100\114\045\001\002" +
    "\000\004\064\251\001\002\000\054\005\uff9e\006\uff9e\011" +
    "\uff9e\012\uff9e\021\uff9e\023\uff9e\027\uff9e\035\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\057\uff9e\064" +
    "\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\114\uff9e\001\002" +
    "\000\004\064\253\001\002\000\054\005\uff9f\006\uff9f\011" +
    "\uff9f\012\uff9f\021\uff9f\023\uff9f\027\uff9f\035\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\057\uff9f\064" +
    "\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\114\uff9f\001\002" +
    "\000\050\005\046\011\104\021\065\023\075\027\062\035" +
    "\076\043\055\044\066\045\101\046\057\050\047\051\042" +
    "\057\044\064\uffbf\070\051\071\074\072\056\073\100\114" +
    "\045\001\002\000\004\063\261\001\002\000\004\064\257" +
    "\001\002\000\056\005\uff9d\006\uff9d\011\uff9d\012\uff9d\015" +
    "\244\021\uff9d\023\uff9d\027\uff9d\035\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\050\uff9d\051\uff9d\057\uff9d\064\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\114\uff9d\001\002\000\054" +
    "\005\uffa0\006\uffa0\011\uffa0\012\uffa0\021\uffa0\023\uffa0\027" +
    "\uffa0\035\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0" +
    "\051\uffa0\057\uffa0\064\uffa0\070\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\114\uffa0\001\002\000\050\005\046\011\104\021\065" +
    "\023\075\027\062\035\076\043\055\044\066\045\101\046" +
    "\057\050\047\051\042\057\044\064\uffbf\070\051\071\074" +
    "\072\056\073\100\114\045\001\002\000\004\064\263\001" +
    "\002\000\056\005\uff9d\006\uff9d\011\uff9d\012\uff9d\015\244" +
    "\021\uff9d\023\uff9d\027\uff9d\035\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\050\uff9d\051\uff9d\057\uff9d\064\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\114\uff9d\001\002\000\054\005" +
    "\uffa2\006\uffa2\011\uffa2\012\uffa2\021\uffa2\023\uffa2\027\uffa2" +
    "\035\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051" +
    "\uffa2\057\uffa2\064\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2" +
    "\114\uffa2\001\002\000\004\064\266\001\002\000\056\005" +
    "\uff9d\006\uff9d\011\uff9d\012\uff9d\015\244\021\uff9d\023\uff9d" +
    "\027\uff9d\035\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\050" +
    "\uff9d\051\uff9d\057\uff9d\064\uff9d\070\uff9d\071\uff9d\072\uff9d" +
    "\073\uff9d\114\uff9d\001\002\000\054\005\uffa1\006\uffa1\011" +
    "\uffa1\012\uffa1\021\uffa1\023\uffa1\027\uffa1\035\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\057\uffa1\064" +
    "\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\114\uffa1\001\002" +
    "\000\042\053\uffd9\054\uffd9\060\uffd9\072\uffd9\073\uffd9\074" +
    "\uffd9\075\uffd9\076\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9" +
    "\110\uffd9\111\uffd9\112\uffd9\113\uffd9\001\002\000\010\003" +
    "\274\046\272\060\273\001\002\000\004\060\276\001\002" +
    "\000\004\054\uffaa\001\002\000\004\060\275\001\002\000" +
    "\004\054\uffa9\001\002\000\004\054\uffab\001\002\000\044" +
    "\003\302\007\023\020\012\024\006\025\004\030\010\041" +
    "\007\046\057\050\047\051\042\054\uff96\057\044\070\051" +
    "\071\074\072\056\073\100\114\045\001\002\000\004\046" +
    "\325\001\002\000\006\054\uff98\060\uff98\001\002\000\054" +
    "\005\046\011\104\021\065\023\075\027\062\035\076\043" +
    "\055\044\066\045\101\046\057\050\047\051\042\057\044" +
    "\060\315\063\314\064\uffbf\070\051\071\074\072\056\073" +
    "\100\114\045\001\002\000\004\054\304\001\002\000\042" +
    "\007\023\020\012\024\006\025\004\030\010\041\007\046" +
    "\057\050\047\051\042\054\uff96\057\044\070\051\071\074" +
    "\072\056\073\100\114\045\001\002\000\004\054\306\001" +
    "\002\000\042\007\023\020\012\024\006\025\004\030\010" +
    "\041\007\046\057\050\047\051\042\057\044\060\uff96\070" +
    "\051\071\074\072\056\073\100\114\045\001\002\000\004" +
    "\060\310\001\002\000\004\063\311\001\002\000\050\005" +
    "\046\011\104\021\065\023\075\027\062\035\076\043\055" +
    "\044\066\045\101\046\057\050\047\051\042\057\044\064" +
    "\uffbf\070\051\071\074\072\056\073\100\114\045\001\002" +
    "\000\004\064\313\001\002\000\054\005\uff9c\006\uff9c\011" +
    "\uff9c\012\uff9c\021\uff9c\023\uff9c\027\uff9c\035\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\057\uff9c\064" +
    "\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\114\uff9c\001\002" +
    "\000\050\005\046\011\104\021\065\023\075\027\062\035" +
    "\076\043\055\044\066\045\101\046\057\050\047\051\042" +
    "\057\044\064\uffbf\070\051\071\074\072\056\073\100\114" +
    "\045\001\002\000\004\063\320\001\002\000\004\064\317" +
    "\001\002\000\054\005\uff99\006\uff99\011\uff99\012\uff99\021" +
    "\uff99\023\uff99\027\uff99\035\uff99\043\uff99\044\uff99\045\uff99" +
    "\046\uff99\050\uff99\051\uff99\057\uff99\064\uff99\070\uff99\071" +
    "\uff99\072\uff99\073\uff99\114\uff99\001\002\000\050\005\046" +
    "\011\104\021\065\023\075\027\062\035\076\043\055\044" +
    "\066\045\101\046\057\050\047\051\042\057\044\064\uffbf" +
    "\070\051\071\074\072\056\073\100\114\045\001\002\000" +
    "\004\064\322\001\002\000\054\005\uff9b\006\uff9b\011\uff9b" +
    "\012\uff9b\021\uff9b\023\uff9b\027\uff9b\035\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\050\uff9b\051\uff9b\057\uff9b\064\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\073\uff9b\114\uff9b\001\002\000" +
    "\004\064\324\001\002\000\054\005\uff9a\006\uff9a\011\uff9a" +
    "\012\uff9a\021\uff9a\023\uff9a\027\uff9a\035\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a\057\uff9a\064\uff9a" +
    "\070\uff9a\071\uff9a\072\uff9a\073\uff9a\114\uff9a\001\002\000" +
    "\004\056\326\001\002\000\024\046\107\050\047\051\042" +
    "\057\044\070\051\071\074\072\056\073\100\114\045\001" +
    "\002\000\040\054\uff97\060\uff97\072\124\073\126\074\130" +
    "\075\127\076\141\104\137\105\123\106\133\107\135\110" +
    "\132\111\131\112\140\113\134\001\002\000\006\053\ufff4" +
    "\054\ufff4\001\002\000\006\053\333\054\ufff0\001\002\000" +
    "\004\054\ufff3\001\002\000\004\046\334\001\002\000\010" +
    "\053\ufff2\054\ufff2\056\ufff2\001\002\000\010\053\333\054" +
    "\ufff0\056\ufff0\001\002\000\006\054\ufff1\056\ufff1\001\002" +
    "\000\054\005\uffb9\006\uffb9\011\uffb9\012\uffb9\021\uffb9\023" +
    "\uffb9\027\uffb9\035\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\050\uffb9\051\uffb9\057\uffb9\064\uffb9\070\uffb9\071\uffb9\072" +
    "\uffb9\073\uffb9\114\uffb9\001\002\000\004\054\uff82\001\002" +
    "\000\010\006\uffc0\012\uffc0\064\uffc0\001\002\000\014\056" +
    "\350\077\345\100\347\101\343\102\346\001\002\000\024" +
    "\046\uffae\050\uffae\051\uffae\057\uffae\070\uffae\071\uffae\072" +
    "\uffae\073\uffae\114\uffae\001\002\000\024\046\107\050\047" +
    "\051\042\057\044\070\051\071\074\072\056\073\100\114" +
    "\045\001\002\000\024\046\uffb0\050\uffb0\051\uffb0\057\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\114\uffb0\001\002\000" +
    "\024\046\uffad\050\uffad\051\uffad\057\uffad\070\uffad\071\uffad" +
    "\072\uffad\073\uffad\114\uffad\001\002\000\024\046\uffaf\050" +
    "\uffaf\051\uffaf\057\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf" +
    "\114\uffaf\001\002\000\024\046\uffac\050\uffac\051\uffac\057" +
    "\uffac\070\uffac\071\uffac\072\uffac\073\uffac\114\uffac\001\002" +
    "\000\042\053\uffb1\054\uffb1\060\uffb1\072\124\073\126\074" +
    "\130\075\127\076\141\104\137\105\123\106\133\107\135" +
    "\110\132\111\131\112\140\113\134\001\002\000\026\003" +
    "\353\046\057\050\047\051\042\057\044\070\051\071\074" +
    "\072\056\073\100\114\045\001\002\000\054\005\046\011" +
    "\104\021\065\023\075\027\062\035\076\043\055\044\066" +
    "\045\101\046\057\050\047\051\042\057\044\060\362\063" +
    "\361\064\uffbf\070\051\071\074\072\056\073\100\114\045" +
    "\001\002\000\004\060\355\001\002\000\004\063\356\001" +
    "\002\000\050\005\046\011\104\021\065\023\075\027\062" +
    "\035\076\043\055\044\066\045\101\046\057\050\047\051" +
    "\042\057\044\064\uffbf\070\051\071\074\072\056\073\100" +
    "\114\045\001\002\000\004\064\360\001\002\000\054\005" +
    "\uff95\006\uff95\011\uff95\012\uff95\021\uff95\023\uff95\027\uff95" +
    "\035\uff95\043\uff95\044\uff95\045\uff95\046\uff95\050\uff95\051" +
    "\uff95\057\uff95\064\uff95\070\uff95\071\uff95\072\uff95\073\uff95" +
    "\114\uff95\001\002\000\050\005\046\011\104\021\065\023" +
    "\075\027\062\035\076\043\055\044\066\045\101\046\057" +
    "\050\047\051\042\057\044\064\uffbf\070\051\071\074\072" +
    "\056\073\100\114\045\001\002\000\004\063\365\001\002" +
    "\000\004\064\364\001\002\000\054\005\uff92\006\uff92\011" +
    "\uff92\012\uff92\021\uff92\023\uff92\027\uff92\035\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\050\uff92\051\uff92\057\uff92\064" +
    "\uff92\070\uff92\071\uff92\072\uff92\073\uff92\114\uff92\001\002" +
    "\000\050\005\046\011\104\021\065\023\075\027\062\035" +
    "\076\043\055\044\066\045\101\046\057\050\047\051\042" +
    "\057\044\064\uffbf\070\051\071\074\072\056\073\100\114" +
    "\045\001\002\000\004\064\367\001\002\000\054\005\uff94" +
    "\006\uff94\011\uff94\012\uff94\021\uff94\023\uff94\027\uff94\035" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\050\uff94\051\uff94" +
    "\057\uff94\064\uff94\070\uff94\071\uff94\072\uff94\073\uff94\114" +
    "\uff94\001\002\000\004\064\371\001\002\000\054\005\uff93" +
    "\006\uff93\011\uff93\012\uff93\021\uff93\023\uff93\027\uff93\035" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93" +
    "\057\uff93\064\uff93\070\uff93\071\uff93\072\uff93\073\uff93\114" +
    "\uff93\001\002\000\054\005\uffbc\006\uffbc\011\uffbc\012\uffbc" +
    "\021\uffbc\023\uffbc\027\uffbc\035\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\050\uffbc\051\uffbc\057\uffbc\064\uffbc\070\uffbc" +
    "\071\uffbc\072\uffbc\073\uffbc\114\uffbc\001\002\000\020\002" +
    "\uffe8\007\uffe8\020\uffe8\024\uffe8\025\uffe8\030\uffe8\041\uffe8" +
    "\001\002\000\054\005\uffbb\006\uffbb\011\uffbb\012\uffbb\021" +
    "\uffbb\023\uffbb\027\uffbb\035\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\050\uffbb\051\uffbb\057\uffbb\064\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\114\uffbb\001\002\000\036\060\376" +
    "\072\124\073\126\074\130\075\127\076\141\104\137\105" +
    "\123\106\133\107\135\110\132\111\131\112\140\113\134" +
    "\001\002\000\042\053\uffdb\054\uffdb\060\uffdb\072\uffdb\073" +
    "\uffdb\074\uffdb\075\uffdb\076\uffdb\104\uffdb\105\uffdb\106\uffdb" +
    "\107\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb\001\002\000" +
    "\054\005\uffbd\006\uffbd\011\uffbd\012\uffbd\021\uffbd\023\uffbd" +
    "\027\uffbd\035\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\050" +
    "\uffbd\051\uffbd\057\uffbd\064\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\114\uffbd\001\002\000\004\060\uffe1\001\002\000" +
    "\016\007\023\020\012\024\006\025\004\030\010\041\007" +
    "\001\002\000\006\053\u0101\060\uffde\001\002\000\004\060" +
    "\uffdf\001\002\000\006\053\uffe2\060\uffe2\001\002\000\004" +
    "\064\u010d\001\002\000\066\005\046\007\023\010\011\011" +
    "\104\020\012\021\065\023\075\024\006\025\004\027\062" +
    "\030\010\035\076\041\007\043\055\044\066\045\101\046" +
    "\057\050\047\051\042\057\044\064\uffbf\070\051\071\074" +
    "\072\056\073\100\114\045\001\002\000\004\063\u0108\001" +
    "\002\000\066\005\046\007\023\010\011\011\104\020\012" +
    "\021\065\023\075\024\006\025\004\027\062\030\010\035" +
    "\076\041\007\043\055\044\066\045\101\046\057\050\047" +
    "\051\042\057\044\064\uffbf\070\051\071\074\072\056\073" +
    "\100\114\045\001\002\000\004\064\u010a\001\002\000\020" +
    "\002\uffe7\007\uffe7\020\uffe7\024\uffe7\025\uffe7\030\uffe7\041" +
    "\uffe7\001\002\000\004\064\u010c\001\002\000\020\002\uffe6" +
    "\007\uffe6\020\uffe6\024\uffe6\025\uffe6\030\uffe6\041\uffe6\001" +
    "\002\000\020\002\uffe5\007\uffe5\020\uffe5\024\uffe5\025\uffe5" +
    "\030\uffe5\041\uffe5\001\002\000\022\003\017\007\023\010" +
    "\011\020\012\024\006\025\004\030\010\041\007\001\002" +
    "\000\004\002\ufff8\001\002\000\010\053\ufff4\054\ufff4\057" +
    "\027\001\002\000\004\002\001\001\002\000\004\046\u0113" +
    "\001\002\000\006\053\uffef\056\uffef\001\002\000\006\053" +
    "\333\056\ufff0\001\002\000\004\056\uffee\001\002\000\004" +
    "\056\u0117\001\002\000\024\046\107\050\047\051\042\057" +
    "\044\070\051\071\074\072\056\073\100\114\045\001\002" +
    "\000\036\054\uffed\072\124\073\126\074\130\075\127\076" +
    "\141\104\137\105\123\106\133\107\135\110\132\111\131" +
    "\112\140\113\134\001\002\000\022\003\017\007\023\010" +
    "\011\020\012\024\006\025\004\030\010\041\007\001\002" +
    "\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0118\000\022\002\013\003\015\004\012\005\021\006" +
    "\004\007\020\010\017\022\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\023\007\024" +
    "\010\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\030\001\001\000\054\003\063\004" +
    "\012\005\021\006\101\014\057\017\037\020\071\021\102" +
    "\023\072\024\060\025\076\026\067\030\u0104\031\040\032" +
    "\053\035\052\037\051\041\070\042\042\046\062\050\066" +
    "\001\001\000\010\003\031\011\032\012\033\001\001\000" +
    "\002\001\001\000\004\013\377\001\001\000\002\001\001" +
    "\000\004\060\035\001\001\000\002\001\001\000\054\003" +
    "\063\004\012\005\021\006\101\014\057\017\037\020\071" +
    "\021\102\023\072\024\060\025\076\026\067\030\047\031" +
    "\040\032\053\035\052\037\051\041\070\042\042\046\062" +
    "\050\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\374\017\037" +
    "\020\071\021\102\050\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\110" +
    "\061\341\001\001\000\006\015\124\016\135\001\001\000" +
    "\042\014\057\017\037\020\071\021\102\023\340\024\060" +
    "\025\076\026\067\031\040\032\053\035\052\037\051\041" +
    "\070\042\042\046\062\050\066\001\001\000\020\014\057" +
    "\017\037\020\071\021\102\025\337\026\067\050\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\105\017\037\020\071\021\102\050\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\124" +
    "\016\135\001\001\000\004\020\110\001\001\000\022\014" +
    "\057\017\037\020\071\021\102\025\112\026\067\050\066" +
    "\051\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\057\017\037\020\071\021" +
    "\102\025\117\026\067\050\066\001\001\000\004\052\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\142\017\037\020\071" +
    "\021\102\050\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\141\017\037\020\071\021\102\050\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\124\016\135\001\001\000\006\015\124\016\135" +
    "\001\001\000\054\003\063\004\012\005\021\006\101\014" +
    "\057\017\037\020\071\021\102\023\072\024\060\025\076" +
    "\026\067\030\144\031\040\032\053\035\052\037\051\041" +
    "\070\042\042\046\062\050\066\001\001\000\002\001\001" +
    "\000\022\014\057\017\037\020\071\021\102\025\147\026" +
    "\067\033\146\050\066\001\001\000\002\001\001\000\004" +
    "\034\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\014\057\017\037\020\071\021\102" +
    "\025\154\026\067\050\066\001\001\000\004\034\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\043\170\044" +
    "\167\045\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\210\044\167\045\166\001\001\000\002\001" +
    "\001\000\010\043\207\044\167\045\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\014\057\017\037\020\071\021\102\023\176" +
    "\024\060\025\076\026\067\031\040\032\053\035\052\037" +
    "\051\041\070\042\042\046\062\050\066\001\001\000\042" +
    "\014\057\017\037\020\071\021\102\023\177\024\060\025" +
    "\076\026\067\031\040\032\053\035\052\037\051\041\070" +
    "\042\042\046\062\050\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\014\057\017\037" +
    "\020\071\021\102\023\203\024\060\025\076\026\067\031" +
    "\040\032\053\035\052\037\051\041\070\042\042\046\062" +
    "\050\066\001\001\000\042\014\057\017\037\020\071\021" +
    "\102\023\204\024\060\025\076\026\067\031\040\032\053" +
    "\035\052\037\051\041\070\042\042\046\062\050\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\014\057\017\037" +
    "\020\071\021\102\023\215\024\060\025\076\026\067\031" +
    "\040\032\053\035\052\037\051\041\070\042\042\046\062" +
    "\050\066\001\001\000\042\014\057\017\037\020\071\021" +
    "\102\023\216\024\060\025\076\026\067\031\040\032\053" +
    "\035\052\037\051\041\070\042\042\046\062\050\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\057\017\037\020\071\021\102\023\222\024" +
    "\060\025\076\026\067\031\040\032\053\035\052\037\051" +
    "\041\070\042\042\046\062\050\066\001\001\000\042\014" +
    "\057\017\037\020\071\021\102\023\223\024\060\025\076" +
    "\026\067\031\040\032\053\035\052\037\051\041\070\042" +
    "\042\046\062\050\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\226\044\167\045" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\043\232\044\167\045\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\057\017\037" +
    "\020\071\021\102\025\236\026\067\050\066\001\001\000" +
    "\042\014\057\017\037\020\071\021\102\023\255\024\060" +
    "\025\076\026\067\031\040\032\053\035\052\037\051\041" +
    "\070\042\042\046\062\050\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\057\017\037\020\071\021" +
    "\102\023\241\024\060\025\076\026\067\031\040\032\053" +
    "\035\052\037\051\041\070\042\042\046\062\050\066\001" +
    "\001\000\002\001\001\000\004\036\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\014\057\017\037\020" +
    "\071\021\102\023\251\024\060\025\076\026\067\031\040" +
    "\032\053\035\052\037\051\041\070\042\042\046\062\050" +
    "\066\001\001\000\042\014\057\017\037\020\071\021\102" +
    "\023\247\024\060\025\076\026\067\031\040\032\053\035" +
    "\052\037\051\041\070\042\042\046\062\050\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\057\017\037\020\071\021\102" +
    "\023\264\024\060\025\076\026\067\031\040\032\053\035" +
    "\052\037\051\041\070\042\042\046\062\050\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\257\001" +
    "\001\000\002\001\001\000\042\014\057\017\037\020\071" +
    "\021\102\023\261\024\060\025\076\026\067\031\040\032" +
    "\053\035\052\037\051\041\070\042\042\046\062\050\066" +
    "\001\001\000\002\001\001\000\004\036\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\277\014\057\017" +
    "\037\020\071\021\102\025\300\026\067\040\302\050\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\057\017\037\020\071\021\102\023\315\024\060\025\076" +
    "\026\067\031\040\032\053\035\052\037\051\041\070\042" +
    "\042\046\062\050\066\001\001\000\002\001\001\000\024" +
    "\003\277\014\057\017\037\020\071\021\102\025\300\026" +
    "\067\040\304\050\066\001\001\000\002\001\001\000\024" +
    "\003\277\014\057\017\037\020\071\021\102\025\300\026" +
    "\067\040\306\050\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\014\057\017\037\020\071\021\102\023" +
    "\311\024\060\025\076\026\067\031\040\032\053\035\052" +
    "\037\051\041\070\042\042\046\062\050\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\014\057\017\037" +
    "\020\071\021\102\023\322\024\060\025\076\026\067\031" +
    "\040\032\053\035\052\037\051\041\070\042\042\046\062" +
    "\050\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\057\017\037\020\071\021\102" +
    "\023\320\024\060\025\076\026\067\031\040\032\053\035" +
    "\052\037\051\041\070\042\042\046\062\050\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\326\017\037" +
    "\020\071\021\102\050\066\001\001\000\006\015\124\016" +
    "\135\001\001\000\004\053\330\001\001\000\004\047\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\334\001\001\000\004\047\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\343\001\001\000\002\001\001\000\014\014\350" +
    "\017\037\020\071\021\102\050\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\124\016\135\001\001\000\020\014\057\017" +
    "\037\020\071\021\102\025\353\026\067\050\066\001\001" +
    "\000\042\014\057\017\037\020\071\021\102\023\362\024" +
    "\060\025\076\026\067\031\040\032\053\035\052\037\051" +
    "\041\070\042\042\046\062\050\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\014\057\017\037\020\071" +
    "\021\102\023\356\024\060\025\076\026\067\031\040\032" +
    "\053\035\052\037\051\041\070\042\042\046\062\050\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\057\017\037\020\071\021\102\023\367\024\060\025\076" +
    "\026\067\031\040\032\053\035\052\037\051\041\070\042" +
    "\042\046\062\050\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\014\057\017\037\020" +
    "\071\021\102\023\365\024\060\025\076\026\067\031\040" +
    "\032\053\035\052\037\051\041\070\042\042\046\062\050" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\124\016\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\031\011\u0101\001\001\000\004\013\u0102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\063\004\012\005\021\006\101\014\057\017\037" +
    "\020\071\021\102\023\072\024\060\025\076\026\067\030" +
    "\u010a\031\040\032\053\035\052\037\051\041\070\042\042" +
    "\046\062\050\066\001\001\000\002\001\001\000\054\003" +
    "\063\004\012\005\021\006\101\014\057\017\037\020\071" +
    "\021\102\023\072\024\060\025\076\026\067\030\u0108\031" +
    "\040\032\053\035\052\037\051\041\070\042\042\046\062" +
    "\050\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\015\004\012\005\021\006\004\007\020\010\017\022" +
    "\u010e\001\001\000\002\001\001\000\004\053\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0113\001" +
    "\001\000\004\047\u0114\001\001\000\004\056\u0115\001\001" +
    "\000\002\001\001\000\014\014\u0117\017\037\020\071\021" +
    "\102\050\066\001\001\000\006\015\124\016\135\001\001" +
    "\000\020\003\015\004\012\005\021\006\004\007\020\010" +
    "\017\022\u0119\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<Token> errors = new ArrayList<>();
    public Translator tl = new Translator();

    public void syntax_error(Symbol cur_token){
        errors.add(new Token(cur_token.sym, cur_token.right, cur_token.left, cur_token.value));
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        errors.add(new Token(cur_token.sym, cur_token.right, cur_token.left, cur_token.value));
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= innit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // key_types ::= KEY_INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // key_types ::= KEY_VOID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // key_types ::= KEY_CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // key_types ::= KEY_LONG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // key_types ::= KEY_SHORT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // key_types ::= KEY_FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // innit ::= body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("innit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= declaration OP_SEMICOL body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= error OP_SEMICOL body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body ::= functions_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= const_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberIdVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable_declaration ::= key_types ID NT$0 add_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tl.insertTableVar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberIdVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // add_id ::= OP_COMA ID NT$1 add_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_id",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // add_id ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_id",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberIdVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
tl.insertTableVar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // const_declaration ::= KEY_CONST key_types ID NT$2 add_id NT$3 OP_ASSIGN expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // functions_block ::= function_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // functions_block ::= function_statement functions_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
tl.rememberIdFunc(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
tl.insertTableFunc();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function_statement ::= key_types ID OP_PAR_OPEN NT$4 parameters OP_PAR_CLOSE NT$5 OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_statement ::= key_types ID OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_statement ::= key_types ID OP_PAR_OPEN error OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_statement ::= key_types ID OP_PAR_OPEN error function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_body ::= declaration OP_SEMICOL function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_body ::= block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter ::= key_types ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberIdVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters ::= parameter add_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // add_parameter ::= OP_COMA parameter add_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // add_parameter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression arithmetic_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression logic_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= OP_PAR_OPEN expression OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= ID postfix_operator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= postfix_operator ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= unary_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operand ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operand ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operand ::= call_function_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithmetic_operator ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithmetic_operator ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arithmetic_operator ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arithmetic_operator ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arithmetic_operator ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logic_operator ::= OP_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logic_operator ::= OP_GRE_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logic_operator ::= OP_GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logic_operator ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logic_operator ::= OP_LESS_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logic_operator ::= OP_NOT_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logic_operator ::= OP_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logic_operator ::= OP_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // postfix_operator ::= OP_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // postfix_operator ::= OP_DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unary_operator ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unary_operator ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unary_operator ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // block_statement ::= statement block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // block_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= expression_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= read_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= write_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= KEY_BREAK OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= KEY_CONT OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= return_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= switch_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression_statement ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression_statement ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment_expression ::= ID NT$6 assignment_operator expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment_operator ::= OP_ADD_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment_operator ::= OP_SUB_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment_operator ::= OP_MULT_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment_operator ::= OP_DIV_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignment_operator ::= OP_ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // read_statement ::= KEY_READ OP_PAR_OPEN ID OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // read_statement ::= KEY_READ OP_PAR_OPEN OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // read_statement ::= KEY_READ OP_PAR_OPEN error OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // write_statement ::= KEY_WRITE OP_PAR_OPEN write_parameters OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // write_statement ::= KEY_WRITE OP_PAR_OPEN error OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // write_parameters ::= expression_statement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // write_parameters_list ::= OP_COMA expression_statement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // write_parameters_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if_statement ::= KEY_IF OP_PAR_OPEN expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // if_statement ::= KEY_IF OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_statement ::= KEY_IF OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // if_statement ::= KEY_IF OP_PAR_OPEN error block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // else_statement ::= KEY_ELSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // else_statement ::= KEY_ELSE error block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_statement ::= KEY_FOR OP_PAR_OPEN for_expression_statement OP_SEMICOL for_expression_statement OP_SEMICOL for_expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_statement ::= KEY_FOR OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_statement ::= KEY_FOR OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_statement ::= KEY_FOR OP_PAR_OPEN error block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_expression_statement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_expression_statement ::= key_types ID OP_ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_expression_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // while_statement ::= KEY_WHILE OP_PAR_OPEN expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // while_statement ::= KEY_WHILE OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // while_statement ::= KEY_WHILE OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // while_statement ::= KEY_WHILE OP_PAR_OPEN error block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN ID OP_PAR_CLOSE OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN error OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN error case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // case_blocks ::= case case_blocks 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // case_blocks ::= default 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case_blocks ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // case ::= KEY_CASE INT OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // case ::= KEY_CASE INT OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // case ::= KEY_CASE error OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // case ::= KEY_CASE error OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // default ::= KEY_DEF OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // default ::= KEY_DEF OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // default ::= KEY_DEF error OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // default ::= KEY_DEF error OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // return_statement ::= KEY_RET expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // return_statement ::= KEY_RET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // call_function_statement ::= ID OP_PAR_OPEN input_parameters OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_function_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // call_function_statement ::= ID OP_PAR_OPEN error OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_function_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // input_parameters ::= expression_statement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // input_parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // add_input_parameter ::= OP_COMA expression_statement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_input_parameter",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // add_input_parameter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_input_parameter",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
