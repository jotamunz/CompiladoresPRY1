
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package model.compiler.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import model.compiler.scanner.Token;
import model.compiler.translator.Translator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\002\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\003\000\002\006\003\000\002" +
    "\006\003\000\002\053\002\000\002\005\006\000\002\054" +
    "\002\000\002\047\006\000\002\047\002\000\002\055\002" +
    "\000\002\056\002\000\002\004\012\000\002\007\003\000" +
    "\002\007\004\000\002\010\012\000\002\010\012\000\002" +
    "\010\011\000\002\010\010\000\002\030\005\000\002\030" +
    "\003\000\002\011\004\000\002\012\004\000\002\012\002" +
    "\000\002\013\005\000\002\013\002\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\023\004\000\002" +
    "\023\002\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\005\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\031\006" +
    "\000\002\031\005\000\002\031\006\000\002\032\006\000" +
    "\002\032\006\000\002\033\004\000\002\034\005\000\002" +
    "\034\002\000\002\035\012\000\002\035\012\000\002\035" +
    "\011\000\002\035\010\000\002\036\006\000\002\036\006" +
    "\000\002\036\002\000\002\037\015\000\002\037\011\000" +
    "\002\037\010\000\002\037\007\000\002\040\003\000\002" +
    "\040\006\000\002\040\002\000\002\041\011\000\002\041" +
    "\011\000\002\041\010\000\002\041\007\000\002\042\011" +
    "\000\002\042\011\000\002\042\010\000\002\042\007\000" +
    "\002\043\004\000\002\043\003\000\002\043\002\000\002" +
    "\044\006\000\002\044\010\000\002\044\006\000\002\044" +
    "\010\000\002\045\005\000\002\045\007\000\002\045\006" +
    "\000\002\045\010\000\002\046\004\000\002\046\003\000" +
    "\002\050\006\000\002\050\006\000\002\051\004\000\002" +
    "\051\002\000\002\052\005\000\002\052\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\022\003\017\007\023\010\011\020\012\024" +
    "\006\025\004\030\010\041\007\001\002\000\004\046\ufffd" +
    "\001\002\000\004\054\u0116\001\002\000\004\046\000\001" +
    "\002\000\004\046\uffff\001\002\000\004\046\ufffc\001\002" +
    "\000\016\007\023\020\012\024\006\025\004\030\010\041" +
    "\007\001\002\000\004\046\ufffb\001\002\000\004\054\ufff5" +
    "\001\002\000\004\002\u010e\001\002\000\004\002\ufffa\001" +
    "\002\000\004\046\u010d\001\002\000\004\054\u010b\001\002" +
    "\000\020\002\uffec\007\023\020\012\024\006\025\004\030" +
    "\010\041\007\001\002\000\004\002\ufff7\001\002\000\004" +
    "\054\ufff6\001\002\000\004\046\ufffe\001\002\000\004\046" +
    "\026\001\002\000\004\002\uffeb\001\002\000\004\057\027" +
    "\001\002\000\022\003\031\007\023\020\012\024\006\025" +
    "\004\030\010\041\007\060\uffe2\001\002\000\004\046\u010a" +
    "\001\002\000\072\005\044\007\023\010\011\011\102\020" +
    "\012\021\063\023\073\024\006\025\004\027\060\030\010" +
    "\035\074\041\007\043\053\044\064\045\077\046\055\050" +
    "\045\051\040\057\042\060\u0103\063\u0102\064\uffc1\070\046" +
    "\071\072\072\054\073\075\114\043\001\002\000\006\053" +
    "\376\060\uffe0\001\002\000\004\060\034\001\002\000\004" +
    "\063\035\001\002\000\066\005\044\007\023\010\011\011" +
    "\102\020\012\021\063\023\073\024\006\025\004\027\060" +
    "\030\010\035\074\041\007\043\053\044\064\045\077\046" +
    "\055\050\045\051\040\057\042\064\uffc1\070\046\071\072" +
    "\072\054\073\075\114\043\001\002\000\042\053\uffd9\054" +
    "\uffd9\060\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\112" +
    "\uffd9\113\uffd9\001\002\000\004\054\374\001\002\000\042" +
    "\053\uffd6\054\uffd6\060\uffd6\072\uffd6\073\uffd6\074\uffd6\075" +
    "\uffd6\076\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6" +
    "\111\uffd6\112\uffd6\113\uffd6\001\002\000\054\005\uffb7\006" +
    "\uffb7\011\uffb7\012\uffb7\021\uffb7\023\uffb7\027\uffb7\035\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\057" +
    "\uffb7\064\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\114\uffb7" +
    "\001\002\000\024\046\105\050\045\051\040\057\042\070" +
    "\046\071\072\072\054\073\075\114\043\001\002\000\024" +
    "\046\uffc5\050\uffc5\051\uffc5\057\uffc5\070\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\114\uffc5\001\002\000\004\054\371\001\002" +
    "\000\042\053\uffd7\054\uffd7\060\uffd7\072\uffd7\073\uffd7\074" +
    "\uffd7\075\uffd7\076\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7" +
    "\110\uffd7\111\uffd7\112\uffd7\113\uffd7\001\002\000\044\046" +
    "\uffc7\053\uffc7\054\uffc7\060\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110" +
    "\uffc7\111\uffc7\112\uffc7\113\uffc7\001\002\000\004\064\370" +
    "\001\002\000\054\005\uffb9\006\uffb9\011\uffb9\012\uffb9\021" +
    "\uffb9\023\uffb9\027\uffb9\035\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\050\uffb9\051\uffb9\057\uffb9\064\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\114\uffb9\001\002\000\054\005\uffba" +
    "\006\uffba\011\uffba\012\uffba\021\uffba\023\uffba\027\uffba\035" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba\051\uffba" +
    "\057\uffba\064\uffba\070\uffba\071\uffba\072\uffba\073\uffba\114" +
    "\uffba\001\002\000\004\054\367\001\002\000\004\057\347" +
    "\001\002\000\024\046\uffc4\050\uffc4\051\uffc4\057\uffc4\070" +
    "\uffc4\071\uffc4\072\uffc4\073\uffc4\114\uffc4\001\002\000\062" +
    "\053\uffd8\054\uffd8\056\341\057\106\060\uffd8\070\046\071" +
    "\072\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\340" +
    "\100\342\101\343\102\344\104\uffd8\105\uffd8\106\uffd8\107" +
    "\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8\001\002\000\042" +
    "\053\uffb6\054\uffb6\060\uffb6\072\123\073\124\074\126\075" +
    "\125\076\136\104\135\105\121\106\127\107\134\110\131" +
    "\111\130\112\137\113\132\001\002\000\054\005\044\006" +
    "\uffc1\011\102\012\uffc1\021\063\023\073\027\060\035\074" +
    "\043\053\044\064\045\077\046\055\050\045\051\040\057" +
    "\042\064\uffc1\070\046\071\072\072\054\073\075\114\043" +
    "\001\002\000\026\046\055\050\045\051\040\054\uff84\057" +
    "\042\070\046\071\072\072\054\073\075\114\043\001\002" +
    "\000\004\054\335\001\002\000\004\046\326\001\002\000" +
    "\004\057\275\001\002\000\004\057\267\001\002\000\010" +
    "\053\uffb5\054\uffb5\060\uffb5\001\002\000\042\053\uffd5\054" +
    "\uffd5\060\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5" +
    "\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112" +
    "\uffd5\113\uffd5\001\002\000\054\005\uffb8\006\uffb8\011\uffb8" +
    "\012\uffb8\021\uffb8\023\uffb8\027\uffb8\035\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\057\uffb8\064\uffb8" +
    "\070\uffb8\071\uffb8\072\uffb8\073\uffb8\114\uffb8\001\002\000" +
    "\004\046\266\001\002\000\004\064\uffe5\001\002\000\044" +
    "\046\uffc6\053\uffc6\054\uffc6\060\uffc6\072\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6" +
    "\110\uffc6\111\uffc6\112\uffc6\113\uffc6\001\002\000\004\057" +
    "\233\001\002\000\004\057\157\001\002\000\024\046\uffc3" +
    "\050\uffc3\051\uffc3\057\uffc3\070\uffc3\071\uffc3\072\uffc3\073" +
    "\uffc3\114\uffc3\001\002\000\004\054\156\001\002\000\004" +
    "\057\144\001\002\000\004\054\142\001\002\000\024\046" +
    "\105\050\045\051\040\057\042\070\046\071\072\072\054" +
    "\073\075\114\043\001\002\000\004\054\103\001\002\000" +
    "\054\005\uffbc\006\uffbc\011\uffbc\012\uffbc\021\uffbc\023\uffbc" +
    "\027\uffbc\035\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\050" +
    "\uffbc\051\uffbc\057\uffbc\064\uffbc\070\uffbc\071\uffbc\072\uffbc" +
    "\073\uffbc\114\uffbc\001\002\000\042\053\uffda\054\uffda\060" +
    "\uffda\072\123\073\124\074\126\075\125\076\136\104\135" +
    "\105\121\106\127\107\134\110\131\111\130\112\137\113" +
    "\132\001\002\000\050\053\uffd8\054\uffd8\057\106\060\uffd8" +
    "\070\046\071\072\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8" +
    "\112\uffd8\113\uffd8\001\002\000\030\003\112\046\055\050" +
    "\045\051\040\057\042\060\uff80\070\046\071\072\072\054" +
    "\073\075\114\043\001\002\000\042\053\uffdc\054\uffdc\060" +
    "\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\104\uffdc" +
    "\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\113" +
    "\uffdc\001\002\000\004\060\120\001\002\000\006\053\115" +
    "\060\uff7e\001\002\000\004\060\113\001\002\000\042\053" +
    "\uff82\054\uff82\060\uff82\072\uff82\073\uff82\074\uff82\075\uff82" +
    "\076\uff82\104\uff82\105\uff82\106\uff82\107\uff82\110\uff82\111" +
    "\uff82\112\uff82\113\uff82\001\002\000\004\060\uff81\001\002" +
    "\000\024\046\055\050\045\051\040\057\042\070\046\071" +
    "\072\072\054\073\075\114\043\001\002\000\006\053\115" +
    "\060\uff7e\001\002\000\004\060\uff7f\001\002\000\042\053" +
    "\uff83\054\uff83\060\uff83\072\uff83\073\uff83\074\uff83\075\uff83" +
    "\076\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83\111" +
    "\uff83\112\uff83\113\uff83\001\002\000\024\046\uffce\050\uffce" +
    "\051\uffce\057\uffce\070\uffce\071\uffce\072\uffce\073\uffce\114" +
    "\uffce\001\002\000\024\046\105\050\045\051\040\057\042" +
    "\070\046\071\072\072\054\073\075\114\043\001\002\000" +
    "\024\046\uffd4\050\uffd4\051\uffd4\057\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\073\uffd4\114\uffd4\001\002\000\024\046\uffd3\050" +
    "\uffd3\051\uffd3\057\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\114\uffd3\001\002\000\024\046\uffd1\050\uffd1\051\uffd1\057" +
    "\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\114\uffd1\001\002" +
    "\000\024\046\uffd2\050\uffd2\051\uffd2\057\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\114\uffd2\001\002\000\024\046\uffcd" +
    "\050\uffcd\051\uffcd\057\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\114\uffcd\001\002\000\024\046\uffca\050\uffca\051\uffca" +
    "\057\uffca\070\uffca\071\uffca\072\uffca\073\uffca\114\uffca\001" +
    "\002\000\024\046\uffcb\050\uffcb\051\uffcb\057\uffcb\070\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\114\uffcb\001\002\000\024\046" +
    "\uffc8\050\uffc8\051\uffc8\057\uffc8\070\uffc8\071\uffc8\072\uffc8" +
    "\073\uffc8\114\uffc8\001\002\000\024\046\105\050\045\051" +
    "\040\057\042\070\046\071\072\072\054\073\075\114\043" +
    "\001\002\000\024\046\uffcc\050\uffcc\051\uffcc\057\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\073\uffcc\114\uffcc\001\002\000\024" +
    "\046\uffcf\050\uffcf\051\uffcf\057\uffcf\070\uffcf\071\uffcf\072" +
    "\uffcf\073\uffcf\114\uffcf\001\002\000\024\046\uffd0\050\uffd0" +
    "\051\uffd0\057\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\114" +
    "\uffd0\001\002\000\024\046\uffc9\050\uffc9\051\uffc9\057\uffc9" +
    "\070\uffc9\071\uffc9\072\uffc9\073\uffc9\114\uffc9\001\002\000" +
    "\042\053\uffde\054\uffde\060\uffde\072\123\073\124\074\126" +
    "\075\125\076\136\104\135\105\121\106\127\107\134\110" +
    "\131\111\130\112\137\113\132\001\002\000\042\053\uffdf" +
    "\054\uffdf\060\uffdf\072\123\073\124\074\126\075\125\076" +
    "\136\104\135\105\121\106\127\107\134\110\131\111\130" +
    "\112\137\113\132\001\002\000\066\005\044\007\023\010" +
    "\011\011\102\020\012\021\063\023\073\024\006\025\004" +
    "\027\060\030\010\035\074\041\007\043\053\044\064\045" +
    "\077\046\055\050\045\051\040\057\042\064\uffc1\070\046" +
    "\071\072\072\054\073\075\114\043\001\002\000\004\064" +
    "\uffe6\001\002\000\026\003\147\046\055\050\045\051\040" +
    "\057\042\070\046\071\072\072\054\073\075\114\043\001" +
    "\002\000\004\060\155\001\002\000\006\053\152\060\uffa7" +
    "\001\002\000\004\060\150\001\002\000\004\054\uffaa\001" +
    "\002\000\004\060\uffa9\001\002\000\024\046\055\050\045" +
    "\051\040\057\042\070\046\071\072\072\054\073\075\114" +
    "\043\001\002\000\006\053\152\060\uffa7\001\002\000\004" +
    "\060\uffa8\001\002\000\004\054\uffab\001\002\000\054\005" +
    "\uffc0\006\uffc0\011\uffc0\012\uffc0\021\uffc0\023\uffc0\027\uffc0" +
    "\035\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\050\uffc0\051" +
    "\uffc0\057\uffc0\064\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\114\uffc0\001\002\000\006\003\161\046\160\001\002\000" +
    "\004\060\227\001\002\000\014\006\170\012\163\060\162" +
    "\063\164\064\uff8e\001\002\000\004\063\224\001\002\000" +
    "\006\003\211\065\212\001\002\000\010\006\170\012\163" +
    "\064\uff8e\001\002\000\004\064\uff8f\001\002\000\010\006" +
    "\170\012\163\064\uff8e\001\002\000\004\064\205\001\002" +
    "\000\006\003\171\050\172\001\002\000\004\065\200\001" +
    "\002\000\004\065\173\001\002\000\056\005\044\006\uffc1" +
    "\011\102\012\uffc1\021\063\023\073\027\060\035\074\043" +
    "\053\044\064\045\077\046\055\050\045\051\040\057\042" +
    "\063\174\064\uffc1\070\046\071\072\072\054\073\075\114" +
    "\043\001\002\000\050\005\044\011\102\021\063\023\073" +
    "\027\060\035\074\043\053\044\064\045\077\046\055\050" +
    "\045\051\040\057\042\064\uffc1\070\046\071\072\072\054" +
    "\073\075\114\043\001\002\000\010\006\uff8d\012\uff8d\064" +
    "\uff8d\001\002\000\004\064\177\001\002\000\010\006\uff8c" +
    "\012\uff8c\064\uff8c\001\002\000\056\005\044\006\uffc1\011" +
    "\102\012\uffc1\021\063\023\073\027\060\035\074\043\053" +
    "\044\064\045\077\046\055\050\045\051\040\057\042\063" +
    "\201\064\uffc1\070\046\071\072\072\054\073\075\114\043" +
    "\001\002\000\050\005\044\011\102\021\063\023\073\027" +
    "\060\035\074\043\053\044\064\045\077\046\055\050\045" +
    "\051\040\057\042\064\uffc1\070\046\071\072\072\054\073" +
    "\075\114\043\001\002\000\010\006\uff8b\012\uff8b\064\uff8b" +
    "\001\002\000\004\064\204\001\002\000\010\006\uff8a\012" +
    "\uff8a\064\uff8a\001\002\000\054\005\uff91\006\uff91\011\uff91" +
    "\012\uff91\021\uff91\023\uff91\027\uff91\035\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\050\uff91\051\uff91\057\uff91\064\uff91" +
    "\070\uff91\071\uff91\072\uff91\073\uff91\114\uff91\001\002\000" +
    "\004\064\uff90\001\002\000\004\064\210\001\002\000\054" +
    "\005\uff92\006\uff92\011\uff92\012\uff92\021\uff92\023\uff92\027" +
    "\uff92\035\uff92\043\uff92\044\uff92\045\uff92\046\uff92\050\uff92" +
    "\051\uff92\057\uff92\064\uff92\070\uff92\071\uff92\072\uff92\073" +
    "\uff92\114\uff92\001\002\000\004\065\217\001\002\000\052" +
    "\005\044\011\102\021\063\023\073\027\060\035\074\043" +
    "\053\044\064\045\077\046\055\050\045\051\040\057\042" +
    "\063\213\064\uffc1\070\046\071\072\072\054\073\075\114" +
    "\043\001\002\000\050\005\044\011\102\021\063\023\073" +
    "\027\060\035\074\043\053\044\064\045\077\046\055\050" +
    "\045\051\040\057\042\064\uffc1\070\046\071\072\072\054" +
    "\073\075\114\043\001\002\000\004\064\uff89\001\002\000" +
    "\004\064\216\001\002\000\004\064\uff88\001\002\000\052" +
    "\005\044\011\102\021\063\023\073\027\060\035\074\043" +
    "\053\044\064\045\077\046\055\050\045\051\040\057\042" +
    "\063\220\064\uffc1\070\046\071\072\072\054\073\075\114" +
    "\043\001\002\000\050\005\044\011\102\021\063\023\073" +
    "\027\060\035\074\043\053\044\064\045\077\046\055\050" +
    "\045\051\040\057\042\064\uffc1\070\046\071\072\072\054" +
    "\073\075\114\043\001\002\000\004\064\uff87\001\002\000" +
    "\004\064\223\001\002\000\004\064\uff86\001\002\000\010" +
    "\006\170\012\163\064\uff8e\001\002\000\004\064\226\001" +
    "\002\000\054\005\uff93\006\uff93\011\uff93\012\uff93\021\uff93" +
    "\023\uff93\027\uff93\035\uff93\043\uff93\044\uff93\045\uff93\046" +
    "\uff93\050\uff93\051\uff93\057\uff93\064\uff93\070\uff93\071\uff93" +
    "\072\uff93\073\uff93\114\uff93\001\002\000\004\063\230\001" +
    "\002\000\010\006\170\012\163\064\uff8e\001\002\000\004" +
    "\064\232\001\002\000\054\005\uff94\006\uff94\011\uff94\012" +
    "\uff94\021\uff94\023\uff94\027\uff94\035\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\050\uff94\051\uff94\057\uff94\064\uff94\070" +
    "\uff94\071\uff94\072\uff94\073\uff94\114\uff94\001\002\000\026" +
    "\003\234\046\055\050\045\051\040\057\042\070\046\071" +
    "\072\072\054\073\075\114\043\001\002\000\054\005\044" +
    "\011\102\021\063\023\073\027\060\035\074\043\053\044" +
    "\064\045\077\046\055\050\045\051\040\057\042\060\253" +
    "\063\252\064\uffc1\070\046\071\072\072\054\073\075\114" +
    "\043\001\002\000\004\060\236\001\002\000\004\063\237" +
    "\001\002\000\050\005\044\011\102\021\063\023\073\027" +
    "\060\035\074\043\053\044\064\045\077\046\055\050\045" +
    "\051\040\057\042\064\uffc1\070\046\071\072\072\054\073" +
    "\075\114\043\001\002\000\004\064\241\001\002\000\056" +
    "\005\uffa0\006\uffa0\011\uffa0\012\uffa0\015\242\021\uffa0\023" +
    "\uffa0\027\uffa0\035\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\050\uffa0\051\uffa0\057\uffa0\064\uffa0\070\uffa0\071\uffa0\072" +
    "\uffa0\073\uffa0\114\uffa0\001\002\000\006\003\245\063\244" +
    "\001\002\000\054\005\uffa6\006\uffa6\011\uffa6\012\uffa6\021" +
    "\uffa6\023\uffa6\027\uffa6\035\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\050\uffa6\051\uffa6\057\uffa6\064\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\114\uffa6\001\002\000\050\005\044" +
    "\011\102\021\063\023\073\027\060\035\074\043\053\044" +
    "\064\045\077\046\055\050\045\051\040\057\042\064\uffc1" +
    "\070\046\071\072\072\054\073\075\114\043\001\002\000" +
    "\050\005\044\011\102\021\063\023\073\027\060\035\074" +
    "\043\053\044\064\045\077\046\055\050\045\051\040\057" +
    "\042\064\uffc1\070\046\071\072\072\054\073\075\114\043" +
    "\001\002\000\004\064\247\001\002\000\054\005\uffa1\006" +
    "\uffa1\011\uffa1\012\uffa1\021\uffa1\023\uffa1\027\uffa1\035\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\057" +
    "\uffa1\064\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\114\uffa1" +
    "\001\002\000\004\064\251\001\002\000\054\005\uffa2\006" +
    "\uffa2\011\uffa2\012\uffa2\021\uffa2\023\uffa2\027\uffa2\035\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\057" +
    "\uffa2\064\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\114\uffa2" +
    "\001\002\000\050\005\044\011\102\021\063\023\073\027" +
    "\060\035\074\043\053\044\064\045\077\046\055\050\045" +
    "\051\040\057\042\064\uffc1\070\046\071\072\072\054\073" +
    "\075\114\043\001\002\000\004\063\257\001\002\000\004" +
    "\064\255\001\002\000\056\005\uffa0\006\uffa0\011\uffa0\012" +
    "\uffa0\015\242\021\uffa0\023\uffa0\027\uffa0\035\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\050\uffa0\051\uffa0\057\uffa0\064" +
    "\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\114\uffa0\001\002" +
    "\000\054\005\uffa3\006\uffa3\011\uffa3\012\uffa3\021\uffa3\023" +
    "\uffa3\027\uffa3\035\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\050\uffa3\051\uffa3\057\uffa3\064\uffa3\070\uffa3\071\uffa3\072" +
    "\uffa3\073\uffa3\114\uffa3\001\002\000\050\005\044\011\102" +
    "\021\063\023\073\027\060\035\074\043\053\044\064\045" +
    "\077\046\055\050\045\051\040\057\042\064\uffc1\070\046" +
    "\071\072\072\054\073\075\114\043\001\002\000\004\064" +
    "\261\001\002\000\056\005\uffa0\006\uffa0\011\uffa0\012\uffa0" +
    "\015\242\021\uffa0\023\uffa0\027\uffa0\035\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\050\uffa0\051\uffa0\057\uffa0\064\uffa0" +
    "\070\uffa0\071\uffa0\072\uffa0\073\uffa0\114\uffa0\001\002\000" +
    "\054\005\uffa5\006\uffa5\011\uffa5\012\uffa5\021\uffa5\023\uffa5" +
    "\027\uffa5\035\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050" +
    "\uffa5\051\uffa5\057\uffa5\064\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\114\uffa5\001\002\000\004\064\264\001\002\000" +
    "\056\005\uffa0\006\uffa0\011\uffa0\012\uffa0\015\242\021\uffa0" +
    "\023\uffa0\027\uffa0\035\uffa0\043\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\050\uffa0\051\uffa0\057\uffa0\064\uffa0\070\uffa0\071\uffa0" +
    "\072\uffa0\073\uffa0\114\uffa0\001\002\000\054\005\uffa4\006" +
    "\uffa4\011\uffa4\012\uffa4\021\uffa4\023\uffa4\027\uffa4\035\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\057" +
    "\uffa4\064\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\114\uffa4" +
    "\001\002\000\042\053\uffdb\054\uffdb\060\uffdb\072\uffdb\073" +
    "\uffdb\074\uffdb\075\uffdb\076\uffdb\104\uffdb\105\uffdb\106\uffdb" +
    "\107\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb\001\002\000" +
    "\010\003\272\046\270\060\271\001\002\000\004\060\274" +
    "\001\002\000\004\054\uffad\001\002\000\004\060\273\001" +
    "\002\000\004\054\uffac\001\002\000\004\054\uffae\001\002" +
    "\000\044\003\300\007\023\020\012\024\006\025\004\030" +
    "\010\041\007\046\055\050\045\051\040\054\uff99\057\042" +
    "\070\046\071\072\072\054\073\075\114\043\001\002\000" +
    "\004\046\323\001\002\000\006\054\uff9b\060\uff9b\001\002" +
    "\000\054\005\044\011\102\021\063\023\073\027\060\035" +
    "\074\043\053\044\064\045\077\046\055\050\045\051\040" +
    "\057\042\060\313\063\312\064\uffc1\070\046\071\072\072" +
    "\054\073\075\114\043\001\002\000\004\054\302\001\002" +
    "\000\042\007\023\020\012\024\006\025\004\030\010\041" +
    "\007\046\055\050\045\051\040\054\uff99\057\042\070\046" +
    "\071\072\072\054\073\075\114\043\001\002\000\004\054" +
    "\304\001\002\000\042\007\023\020\012\024\006\025\004" +
    "\030\010\041\007\046\055\050\045\051\040\057\042\060" +
    "\uff99\070\046\071\072\072\054\073\075\114\043\001\002" +
    "\000\004\060\306\001\002\000\004\063\307\001\002\000" +
    "\050\005\044\011\102\021\063\023\073\027\060\035\074" +
    "\043\053\044\064\045\077\046\055\050\045\051\040\057" +
    "\042\064\uffc1\070\046\071\072\072\054\073\075\114\043" +
    "\001\002\000\004\064\311\001\002\000\054\005\uff9f\006" +
    "\uff9f\011\uff9f\012\uff9f\021\uff9f\023\uff9f\027\uff9f\035\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\057" +
    "\uff9f\064\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\114\uff9f" +
    "\001\002\000\050\005\044\011\102\021\063\023\073\027" +
    "\060\035\074\043\053\044\064\045\077\046\055\050\045" +
    "\051\040\057\042\064\uffc1\070\046\071\072\072\054\073" +
    "\075\114\043\001\002\000\004\063\316\001\002\000\004" +
    "\064\315\001\002\000\054\005\uff9c\006\uff9c\011\uff9c\012" +
    "\uff9c\021\uff9c\023\uff9c\027\uff9c\035\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\050\uff9c\051\uff9c\057\uff9c\064\uff9c\070" +
    "\uff9c\071\uff9c\072\uff9c\073\uff9c\114\uff9c\001\002\000\050" +
    "\005\044\011\102\021\063\023\073\027\060\035\074\043" +
    "\053\044\064\045\077\046\055\050\045\051\040\057\042" +
    "\064\uffc1\070\046\071\072\072\054\073\075\114\043\001" +
    "\002\000\004\064\320\001\002\000\054\005\uff9e\006\uff9e" +
    "\011\uff9e\012\uff9e\021\uff9e\023\uff9e\027\uff9e\035\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\057\uff9e" +
    "\064\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\114\uff9e\001" +
    "\002\000\004\064\322\001\002\000\054\005\uff9d\006\uff9d" +
    "\011\uff9d\012\uff9d\021\uff9d\023\uff9d\027\uff9d\035\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d\057\uff9d" +
    "\064\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\114\uff9d\001" +
    "\002\000\004\056\324\001\002\000\024\046\105\050\045" +
    "\051\040\057\042\070\046\071\072\072\054\073\075\114" +
    "\043\001\002\000\040\054\uff9a\060\uff9a\072\123\073\124" +
    "\074\126\075\125\076\136\104\135\105\121\106\127\107" +
    "\134\110\131\111\130\112\137\113\132\001\002\000\006" +
    "\053\ufff4\054\ufff4\001\002\000\006\053\331\054\ufff0\001" +
    "\002\000\004\054\ufff3\001\002\000\004\046\332\001\002" +
    "\000\010\053\ufff2\054\ufff2\056\ufff2\001\002\000\010\053" +
    "\331\054\ufff0\056\ufff0\001\002\000\006\054\ufff1\056\ufff1" +
    "\001\002\000\054\005\uffbb\006\uffbb\011\uffbb\012\uffbb\021" +
    "\uffbb\023\uffbb\027\uffbb\035\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\050\uffbb\051\uffbb\057\uffbb\064\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\114\uffbb\001\002\000\004\054\uff85" +
    "\001\002\000\010\006\uffc2\012\uffc2\064\uffc2\001\002\000" +
    "\024\046\uffb3\050\uffb3\051\uffb3\057\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\073\uffb3\114\uffb3\001\002\000\024\046\uffaf\050" +
    "\uffaf\051\uffaf\057\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf" +
    "\114\uffaf\001\002\000\024\046\uffb2\050\uffb2\051\uffb2\057" +
    "\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\114\uffb2\001\002" +
    "\000\024\046\uffb1\050\uffb1\051\uffb1\057\uffb1\070\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\114\uffb1\001\002\000\024\046\uffb0" +
    "\050\uffb0\051\uffb0\057\uffb0\070\uffb0\071\uffb0\072\uffb0\073" +
    "\uffb0\114\uffb0\001\002\000\024\046\105\050\045\051\040" +
    "\057\042\070\046\071\072\072\054\073\075\114\043\001" +
    "\002\000\042\053\uffb4\054\uffb4\060\uffb4\072\123\073\124" +
    "\074\126\075\125\076\136\104\135\105\121\106\127\107" +
    "\134\110\131\111\130\112\137\113\132\001\002\000\026" +
    "\003\350\046\055\050\045\051\040\057\042\070\046\071" +
    "\072\072\054\073\075\114\043\001\002\000\054\005\044" +
    "\011\102\021\063\023\073\027\060\035\074\043\053\044" +
    "\064\045\077\046\055\050\045\051\040\057\042\060\357" +
    "\063\356\064\uffc1\070\046\071\072\072\054\073\075\114" +
    "\043\001\002\000\004\060\352\001\002\000\004\063\353" +
    "\001\002\000\050\005\044\011\102\021\063\023\073\027" +
    "\060\035\074\043\053\044\064\045\077\046\055\050\045" +
    "\051\040\057\042\064\uffc1\070\046\071\072\072\054\073" +
    "\075\114\043\001\002\000\004\064\355\001\002\000\054" +
    "\005\uff98\006\uff98\011\uff98\012\uff98\021\uff98\023\uff98\027" +
    "\uff98\035\uff98\043\uff98\044\uff98\045\uff98\046\uff98\050\uff98" +
    "\051\uff98\057\uff98\064\uff98\070\uff98\071\uff98\072\uff98\073" +
    "\uff98\114\uff98\001\002\000\050\005\044\011\102\021\063" +
    "\023\073\027\060\035\074\043\053\044\064\045\077\046" +
    "\055\050\045\051\040\057\042\064\uffc1\070\046\071\072" +
    "\072\054\073\075\114\043\001\002\000\004\063\362\001" +
    "\002\000\004\064\361\001\002\000\054\005\uff95\006\uff95" +
    "\011\uff95\012\uff95\021\uff95\023\uff95\027\uff95\035\uff95\043" +
    "\uff95\044\uff95\045\uff95\046\uff95\050\uff95\051\uff95\057\uff95" +
    "\064\uff95\070\uff95\071\uff95\072\uff95\073\uff95\114\uff95\001" +
    "\002\000\050\005\044\011\102\021\063\023\073\027\060" +
    "\035\074\043\053\044\064\045\077\046\055\050\045\051" +
    "\040\057\042\064\uffc1\070\046\071\072\072\054\073\075" +
    "\114\043\001\002\000\004\064\364\001\002\000\054\005" +
    "\uff97\006\uff97\011\uff97\012\uff97\021\uff97\023\uff97\027\uff97" +
    "\035\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051" +
    "\uff97\057\uff97\064\uff97\070\uff97\071\uff97\072\uff97\073\uff97" +
    "\114\uff97\001\002\000\004\064\366\001\002\000\054\005" +
    "\uff96\006\uff96\011\uff96\012\uff96\021\uff96\023\uff96\027\uff96" +
    "\035\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050\uff96\051" +
    "\uff96\057\uff96\064\uff96\070\uff96\071\uff96\072\uff96\073\uff96" +
    "\114\uff96\001\002\000\054\005\uffbe\006\uffbe\011\uffbe\012" +
    "\uffbe\021\uffbe\023\uffbe\027\uffbe\035\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\050\uffbe\051\uffbe\057\uffbe\064\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\114\uffbe\001\002\000\020" +
    "\002\uffea\007\uffea\020\uffea\024\uffea\025\uffea\030\uffea\041" +
    "\uffea\001\002\000\054\005\uffbd\006\uffbd\011\uffbd\012\uffbd" +
    "\021\uffbd\023\uffbd\027\uffbd\035\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\050\uffbd\051\uffbd\057\uffbd\064\uffbd\070\uffbd" +
    "\071\uffbd\072\uffbd\073\uffbd\114\uffbd\001\002\000\036\060" +
    "\373\072\123\073\124\074\126\075\125\076\136\104\135" +
    "\105\121\106\127\107\134\110\131\111\130\112\137\113" +
    "\132\001\002\000\042\053\uffdd\054\uffdd\060\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\075\uffdd\076\uffdd\104\uffdd\105\uffdd\106" +
    "\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\001\002" +
    "\000\054\005\uffbf\006\uffbf\011\uffbf\012\uffbf\021\uffbf\023" +
    "\uffbf\027\uffbf\035\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\050\uffbf\051\uffbf\057\uffbf\064\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\114\uffbf\001\002\000\004\060\uffe3\001\002" +
    "\000\016\007\023\020\012\024\006\025\004\030\010\041" +
    "\007\001\002\000\006\053\376\060\uffe0\001\002\000\004" +
    "\060\uffe1\001\002\000\004\064\u0109\001\002\000\066\005" +
    "\044\007\023\010\011\011\102\020\012\021\063\023\073" +
    "\024\006\025\004\027\060\030\010\035\074\041\007\043" +
    "\053\044\064\045\077\046\055\050\045\051\040\057\042" +
    "\064\uffc1\070\046\071\072\072\054\073\075\114\043\001" +
    "\002\000\004\063\u0104\001\002\000\066\005\044\007\023" +
    "\010\011\011\102\020\012\021\063\023\073\024\006\025" +
    "\004\027\060\030\010\035\074\041\007\043\053\044\064" +
    "\045\077\046\055\050\045\051\040\057\042\064\uffc1\070" +
    "\046\071\072\072\054\073\075\114\043\001\002\000\004" +
    "\064\u0106\001\002\000\020\002\uffe9\007\uffe9\020\uffe9\024" +
    "\uffe9\025\uffe9\030\uffe9\041\uffe9\001\002\000\004\064\u0108" +
    "\001\002\000\020\002\uffe8\007\uffe8\020\uffe8\024\uffe8\025" +
    "\uffe8\030\uffe8\041\uffe8\001\002\000\020\002\uffe7\007\uffe7" +
    "\020\uffe7\024\uffe7\025\uffe7\030\uffe7\041\uffe7\001\002\000" +
    "\006\053\uffe4\060\uffe4\001\002\000\022\003\017\007\023" +
    "\010\011\020\012\024\006\025\004\030\010\041\007\001" +
    "\002\000\004\002\ufff8\001\002\000\010\053\ufff4\054\ufff4" +
    "\057\027\001\002\000\004\002\001\001\002\000\004\046" +
    "\u0110\001\002\000\006\053\uffef\056\uffef\001\002\000\006" +
    "\053\331\056\ufff0\001\002\000\004\056\uffee\001\002\000" +
    "\004\056\u0114\001\002\000\024\046\105\050\045\051\040" +
    "\057\042\070\046\071\072\072\054\073\075\114\043\001" +
    "\002\000\036\054\uffed\072\123\073\124\074\126\075\125" +
    "\076\136\104\135\105\121\106\127\107\134\110\131\111" +
    "\130\112\137\113\132\001\002\000\022\003\017\007\023" +
    "\010\011\020\012\024\006\025\004\030\010\041\007\001" +
    "\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\022\002\013\003\015\004\012\005\021\006" +
    "\004\007\020\010\017\022\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\023\007\024" +
    "\010\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\027\011\031\012\032\001\001\000" +
    "\002\001\001\000\054\003\061\004\012\005\021\006\077" +
    "\014\055\017\035\020\067\021\100\023\070\024\056\025" +
    "\075\026\064\030\u0100\031\036\032\051\035\050\037\047" +
    "\041\066\042\040\046\060\050\065\001\001\000\004\013" +
    "\374\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\061\004\012\005\021\006\077\014\055\017\035\020" +
    "\067\021\100\023\070\024\056\025\075\026\064\030\046" +
    "\031\036\032\051\035\050\037\047\041\066\042\040\046" +
    "\060\050\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\371\017" +
    "\035\020\067\021\100\050\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\106\027\344\001\001\000\006\015\121\016\132\001\001" +
    "\000\042\014\055\017\035\020\067\021\100\023\336\024" +
    "\056\025\075\026\064\031\036\032\051\035\050\037\047" +
    "\041\066\042\040\046\060\050\065\001\001\000\020\014" +
    "\055\017\035\020\067\021\100\025\335\026\064\050\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\103\017\035\020\067\021\100\050\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\121\016\132\001\001\000\004\020\106\001\001\000\022" +
    "\014\055\017\035\020\067\021\100\025\110\026\064\050" +
    "\065\051\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\055\017\035\020\067" +
    "\021\100\025\115\026\064\050\065\001\001\000\004\052" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\140\017\035\020\067\021\100\050" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\137" +
    "\017\035\020\067\021\100\050\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\121\016\132\001\001\000\006\015\121\016" +
    "\132\001\001\000\054\003\061\004\012\005\021\006\077" +
    "\014\055\017\035\020\067\021\100\023\070\024\056\025" +
    "\075\026\064\030\142\031\036\032\051\035\050\037\047" +
    "\041\066\042\040\046\060\050\065\001\001\000\002\001" +
    "\001\000\022\014\055\017\035\020\067\021\100\025\145" +
    "\026\064\033\144\050\065\001\001\000\002\001\001\000" +
    "\004\034\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\055\017\035\020\067\021" +
    "\100\025\152\026\064\050\065\001\001\000\004\034\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\166" +
    "\044\165\045\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\043\206\044\165\045\164\001\001\000\002" +
    "\001\001\000\010\043\205\044\165\045\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\014\055\017\035\020\067\021\100\023" +
    "\174\024\056\025\075\026\064\031\036\032\051\035\050" +
    "\037\047\041\066\042\040\046\060\050\065\001\001\000" +
    "\042\014\055\017\035\020\067\021\100\023\175\024\056" +
    "\025\075\026\064\031\036\032\051\035\050\037\047\041" +
    "\066\042\040\046\060\050\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\014\055\017" +
    "\035\020\067\021\100\023\201\024\056\025\075\026\064" +
    "\031\036\032\051\035\050\037\047\041\066\042\040\046" +
    "\060\050\065\001\001\000\042\014\055\017\035\020\067" +
    "\021\100\023\202\024\056\025\075\026\064\031\036\032" +
    "\051\035\050\037\047\041\066\042\040\046\060\050\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\014\055\017" +
    "\035\020\067\021\100\023\213\024\056\025\075\026\064" +
    "\031\036\032\051\035\050\037\047\041\066\042\040\046" +
    "\060\050\065\001\001\000\042\014\055\017\035\020\067" +
    "\021\100\023\214\024\056\025\075\026\064\031\036\032" +
    "\051\035\050\037\047\041\066\042\040\046\060\050\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\014\055\017\035\020\067\021\100\023\220" +
    "\024\056\025\075\026\064\031\036\032\051\035\050\037" +
    "\047\041\066\042\040\046\060\050\065\001\001\000\042" +
    "\014\055\017\035\020\067\021\100\023\221\024\056\025" +
    "\075\026\064\031\036\032\051\035\050\037\047\041\066" +
    "\042\040\046\060\050\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\224\044\165" +
    "\045\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\043\230\044\165\045\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\055\017" +
    "\035\020\067\021\100\025\234\026\064\050\065\001\001" +
    "\000\042\014\055\017\035\020\067\021\100\023\253\024" +
    "\056\025\075\026\064\031\036\032\051\035\050\037\047" +
    "\041\066\042\040\046\060\050\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\014\055\017\035\020\067" +
    "\021\100\023\237\024\056\025\075\026\064\031\036\032" +
    "\051\035\050\037\047\041\066\042\040\046\060\050\065" +
    "\001\001\000\002\001\001\000\004\036\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\014\055\017\035" +
    "\020\067\021\100\023\247\024\056\025\075\026\064\031" +
    "\036\032\051\035\050\037\047\041\066\042\040\046\060" +
    "\050\065\001\001\000\042\014\055\017\035\020\067\021" +
    "\100\023\245\024\056\025\075\026\064\031\036\032\051" +
    "\035\050\037\047\041\066\042\040\046\060\050\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\055\017\035\020\067\021" +
    "\100\023\262\024\056\025\075\026\064\031\036\032\051" +
    "\035\050\037\047\041\066\042\040\046\060\050\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\255" +
    "\001\001\000\002\001\001\000\042\014\055\017\035\020" +
    "\067\021\100\023\257\024\056\025\075\026\064\031\036" +
    "\032\051\035\050\037\047\041\066\042\040\046\060\050" +
    "\065\001\001\000\002\001\001\000\004\036\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\275\014\055" +
    "\017\035\020\067\021\100\025\276\026\064\040\300\050" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\014\055\017\035\020\067\021\100\023\313\024\056\025" +
    "\075\026\064\031\036\032\051\035\050\037\047\041\066" +
    "\042\040\046\060\050\065\001\001\000\002\001\001\000" +
    "\024\003\275\014\055\017\035\020\067\021\100\025\276" +
    "\026\064\040\302\050\065\001\001\000\002\001\001\000" +
    "\024\003\275\014\055\017\035\020\067\021\100\025\276" +
    "\026\064\040\304\050\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\055\017\035\020\067\021\100" +
    "\023\307\024\056\025\075\026\064\031\036\032\051\035" +
    "\050\037\047\041\066\042\040\046\060\050\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\014\055\017" +
    "\035\020\067\021\100\023\320\024\056\025\075\026\064" +
    "\031\036\032\051\035\050\037\047\041\066\042\040\046" +
    "\060\050\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\055\017\035\020\067\021" +
    "\100\023\316\024\056\025\075\026\064\031\036\032\051" +
    "\035\050\037\047\041\066\042\040\046\060\050\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\324\017" +
    "\035\020\067\021\100\050\065\001\001\000\006\015\121" +
    "\016\132\001\001\000\004\053\326\001\001\000\004\047" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\332\001\001\000\004\047\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\345\017\035" +
    "\020\067\021\100\050\065\001\001\000\006\015\121\016" +
    "\132\001\001\000\020\014\055\017\035\020\067\021\100" +
    "\025\350\026\064\050\065\001\001\000\042\014\055\017" +
    "\035\020\067\021\100\023\357\024\056\025\075\026\064" +
    "\031\036\032\051\035\050\037\047\041\066\042\040\046" +
    "\060\050\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\055\017\035\020\067\021\100\023\353\024" +
    "\056\025\075\026\064\031\036\032\051\035\050\037\047" +
    "\041\066\042\040\046\060\050\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\014\055\017\035\020\067" +
    "\021\100\023\364\024\056\025\075\026\064\031\036\032" +
    "\051\035\050\037\047\041\066\042\040\046\060\050\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\014\055\017\035\020\067\021\100\023\362" +
    "\024\056\025\075\026\064\031\036\032\051\035\050\037" +
    "\047\041\066\042\040\046\060\050\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\121\016\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\027\011\376" +
    "\001\001\000\004\013\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\061\004\012\005\021\006\077" +
    "\014\055\017\035\020\067\021\100\023\070\024\056\025" +
    "\075\026\064\030\u0106\031\036\032\051\035\050\037\047" +
    "\041\066\042\040\046\060\050\065\001\001\000\002\001" +
    "\001\000\054\003\061\004\012\005\021\006\077\014\055" +
    "\017\035\020\067\021\100\023\070\024\056\025\075\026" +
    "\064\030\u0104\031\036\032\051\035\050\037\047\041\066" +
    "\042\040\046\060\050\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\015\004\012\005" +
    "\021\006\004\007\020\010\017\022\u010b\001\001\000\002" +
    "\001\001\000\004\053\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u0110\001\001\000\004\047\u0111" +
    "\001\001\000\004\056\u0112\001\001\000\002\001\001\000" +
    "\014\014\u0114\017\035\020\067\021\100\050\065\001\001" +
    "\000\006\015\121\016\132\001\001\000\020\003\015\004" +
    "\012\005\021\006\004\007\020\010\017\022\u0116\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<Token> errors = new ArrayList<>();
    public Translator tl = new Translator();

    public void syntax_error(Symbol cur_token){
        errors.add(new Token(cur_token.sym, cur_token.right, cur_token.left, cur_token.value));
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        errors.add(new Token(cur_token.sym, cur_token.right, cur_token.left, cur_token.value));
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= innit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // key_types ::= KEY_INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // key_types ::= KEY_VOID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // key_types ::= KEY_CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // key_types ::= KEY_LONG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // key_types ::= KEY_SHORT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // key_types ::= KEY_FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // innit ::= body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("innit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= declaration OP_SEMICOL body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= error OP_SEMICOL body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body ::= functions_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= const_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberId(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable_declaration ::= key_types ID NT$0 add_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tl.insertSymbolTable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberId(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // add_id ::= OP_COMA ID NT$1 add_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_id",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // add_id ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_id",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberId(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
tl.insertSymbolTable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // const_declaration ::= KEY_CONST key_types ID NT$2 add_id NT$3 OP_ASSIGN expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // functions_block ::= function_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // functions_block ::= function_statement functions_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_statement ::= key_types ID OP_PAR_OPEN parameters OP_PAR_CLOSE OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_statement ::= key_types ID OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function_statement ::= key_types ID OP_PAR_OPEN error OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_statement ::= key_types ID OP_PAR_OPEN error function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_body ::= declaration OP_SEMICOL function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_body ::= block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter ::= key_types ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameters ::= parameter add_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // add_parameter ::= OP_COMA parameter add_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // add_parameter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression arithmetic_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression logic_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= OP_PAR_OPEN expression OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= ID postfix_operator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= postfix_operator ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= unary_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operand ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operand ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operand ::= call_function_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithmetic_operator ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithmetic_operator ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithmetic_operator ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithmetic_operator ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arithmetic_operator ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logic_operator ::= OP_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logic_operator ::= OP_GRE_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logic_operator ::= OP_GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logic_operator ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logic_operator ::= OP_LESS_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logic_operator ::= OP_NOT_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logic_operator ::= OP_OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logic_operator ::= OP_AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // postfix_operator ::= OP_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // postfix_operator ::= OP_DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unary_operator ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unary_operator ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unary_operator ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // block_statement ::= statement block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // block_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= expression_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= read_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= write_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= KEY_BREAK OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= KEY_CONT OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= return_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= switch_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression_statement ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression_statement ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignment_expression ::= ID assignment_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assignment_operator ::= OP_ADD_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assignment_operator ::= OP_SUB_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment_operator ::= OP_MULT_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment_operator ::= OP_DIV_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment_operator ::= OP_ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // read_statement ::= KEY_READ OP_PAR_OPEN ID OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // read_statement ::= KEY_READ OP_PAR_OPEN OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // read_statement ::= KEY_READ OP_PAR_OPEN error OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // write_statement ::= KEY_WRITE OP_PAR_OPEN write_parameters OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // write_statement ::= KEY_WRITE OP_PAR_OPEN error OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // write_parameters ::= expression_statement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // write_parameters_list ::= OP_COMA expression_statement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // write_parameters_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // if_statement ::= KEY_IF OP_PAR_OPEN expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // if_statement ::= KEY_IF OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // if_statement ::= KEY_IF OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if_statement ::= KEY_IF OP_PAR_OPEN error block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // else_statement ::= KEY_ELSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // else_statement ::= KEY_ELSE error block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for_statement ::= KEY_FOR OP_PAR_OPEN for_expression_statement OP_SEMICOL for_expression_statement OP_SEMICOL for_expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_statement ::= KEY_FOR OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for_statement ::= KEY_FOR OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_statement ::= KEY_FOR OP_PAR_OPEN error block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_expression_statement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_expression_statement ::= key_types ID OP_ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_expression_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // while_statement ::= KEY_WHILE OP_PAR_OPEN expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // while_statement ::= KEY_WHILE OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // while_statement ::= KEY_WHILE OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // while_statement ::= KEY_WHILE OP_PAR_OPEN error block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN ID OP_PAR_CLOSE OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN error OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN error case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // case_blocks ::= case case_blocks 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // case_blocks ::= default 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // case_blocks ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // case ::= KEY_CASE INT OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // case ::= KEY_CASE INT OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case ::= KEY_CASE error OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // case ::= KEY_CASE error OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // default ::= KEY_DEF OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // default ::= KEY_DEF OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // default ::= KEY_DEF error OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // default ::= KEY_DEF error OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // return_statement ::= KEY_RET expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // return_statement ::= KEY_RET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // call_function_statement ::= ID OP_PAR_OPEN input_parameters OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_function_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // call_function_statement ::= ID OP_PAR_OPEN error OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_function_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // input_parameters ::= expression_statement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // input_parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // add_input_parameter ::= OP_COMA expression_statement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_input_parameter",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // add_input_parameter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_input_parameter",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
