
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package model.compiler.parser;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\002\003\000\002\024\005\000" +
    "\002\024\003\000\002\004\005\000\002\004\002\000\002" +
    "\007\003\000\002\007\003\000\002\006\005\000\002\051" +
    "\005\000\002\051\002\000\002\005\010\000\002\010\003" +
    "\000\002\010\004\000\002\012\012\000\002\032\005\000" +
    "\002\032\003\000\002\013\004\000\002\014\004\000\002" +
    "\014\002\000\002\015\005\000\002\015\002\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\025" +
    "\004\000\002\025\002\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\033\006\000\002" +
    "\033\005\000\002\034\006\000\002\035\004\000\002\035" +
    "\004\000\002\036\005\000\002\036\005\000\002\036\002" +
    "\000\002\037\012\000\002\040\006\000\002\040\002\000" +
    "\002\041\015\000\002\042\003\000\002\042\006\000\002" +
    "\042\002\000\002\043\011\000\002\044\011\000\002\045" +
    "\004\000\002\045\003\000\002\045\002\000\002\046\006" +
    "\000\002\047\005\000\002\050\004\000\002\050\003\000" +
    "\002\052\006\000\002\053\004\000\002\053\004\000\002" +
    "\053\002\000\002\054\005\000\002\054\005\000\002\054" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\020\007\021\010\012\020\007\024\006\025" +
    "\004\030\011\041\010\001\002\000\004\046\ufffd\001\002" +
    "\000\004\054\310\001\002\000\004\046\000\001\002\000" +
    "\004\046\ufffb\001\002\000\004\046\uffff\001\002\000\004" +
    "\046\ufffc\001\002\000\016\007\021\020\007\024\006\025" +
    "\004\030\011\041\010\001\002\000\004\054\ufff4\001\002" +
    "\000\004\002\302\001\002\000\004\002\ufffa\001\002\000" +
    "\004\046\301\001\002\000\020\002\uffef\007\021\020\007" +
    "\024\006\025\004\030\011\041\010\001\002\000\004\002" +
    "\ufff8\001\002\000\004\046\ufffe\001\002\000\004\054\ufff5" +
    "\001\002\000\004\046\025\001\002\000\004\002\uffee\001" +
    "\002\000\004\057\026\001\002\000\020\007\021\020\007" +
    "\024\006\025\004\030\011\041\010\060\uffe8\001\002\000" +
    "\004\046\300\001\002\000\006\053\275\060\uffe6\001\002" +
    "\000\004\060\032\001\002\000\004\063\033\001\002\000" +
    "\066\005\042\007\021\010\012\011\100\020\007\021\062" +
    "\023\071\024\006\025\004\027\057\030\011\035\072\041" +
    "\010\043\052\044\063\045\075\046\054\050\043\051\036" +
    "\057\040\064\uffca\070\045\071\070\072\053\073\073\114" +
    "\041\001\002\000\036\053\uffdf\054\uffdf\060\uffdf\072\uffdf" +
    "\073\uffdf\074\uffdf\075\uffdf\076\uffdf\104\uffdf\105\uffdf\106" +
    "\uffdf\107\uffdf\110\uffdf\111\uffdf\001\002\000\004\054\273" +
    "\001\002\000\036\053\uffdc\054\uffdc\060\uffdc\072\uffdc\073" +
    "\uffdc\074\uffdc\075\uffdc\076\uffdc\104\uffdc\105\uffdc\106\uffdc" +
    "\107\uffdc\110\uffdc\111\uffdc\001\002\000\054\005\uffbf\006" +
    "\uffbf\011\uffbf\012\uffbf\021\uffbf\023\uffbf\027\uffbf\035\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\050\uffbf\051\uffbf\057" +
    "\uffbf\064\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\114\uffbf" +
    "\001\002\000\024\046\103\050\043\051\036\057\040\070" +
    "\045\071\070\072\053\073\073\114\041\001\002\000\024" +
    "\046\uffce\050\uffce\051\uffce\057\uffce\070\uffce\071\uffce\072" +
    "\uffce\073\uffce\114\uffce\001\002\000\004\054\270\001\002" +
    "\000\036\053\uffdd\054\uffdd\060\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd" +
    "\110\uffdd\111\uffdd\001\002\000\004\054\267\001\002\000" +
    "\040\046\uffd0\053\uffd0\054\uffd0\060\uffd0\072\uffd0\073\uffd0" +
    "\074\uffd0\075\uffd0\076\uffd0\104\uffd0\105\uffd0\106\uffd0\107" +
    "\uffd0\110\uffd0\111\uffd0\001\002\000\004\064\266\001\002" +
    "\000\054\005\uffc1\006\uffc1\011\uffc1\012\uffc1\021\uffc1\023" +
    "\uffc1\027\uffc1\035\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\050\uffc1\051\uffc1\057\uffc1\064\uffc1\070\uffc1\071\uffc1\072" +
    "\uffc1\073\uffc1\114\uffc1\001\002\000\054\005\uffc2\006\uffc2" +
    "\011\uffc2\012\uffc2\021\uffc2\023\uffc2\027\uffc2\035\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\050\uffc2\051\uffc2\057\uffc2" +
    "\064\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\114\uffc2\001" +
    "\002\000\004\054\265\001\002\000\004\057\257\001\002" +
    "\000\024\046\uffcd\050\uffcd\051\uffcd\057\uffcd\070\uffcd\071" +
    "\uffcd\072\uffcd\073\uffcd\114\uffcd\001\002\000\060\053\uffde" +
    "\054\uffde\056\200\057\243\060\uffde\070\045\071\070\072" +
    "\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\177\100\201" +
    "\101\202\102\203\103\205\104\uffde\105\uffde\106\uffde\107" +
    "\uffde\110\uffde\111\uffde\001\002\000\036\053\uffbe\054\uffbe" +
    "\060\uffbe\072\106\073\110\074\112\075\111\076\121\104" +
    "\120\105\105\106\115\107\116\110\114\111\113\001\002" +
    "\000\054\005\042\006\uffca\011\100\012\uffca\021\062\023" +
    "\071\027\057\035\072\043\052\044\063\045\075\046\054" +
    "\050\043\051\036\057\040\064\uffca\070\045\071\070\072" +
    "\053\073\073\114\041\001\002\000\026\046\164\050\043" +
    "\051\036\054\uff9e\057\040\070\045\071\070\072\053\073" +
    "\073\114\041\001\002\000\004\054\240\001\002\000\004" +
    "\046\233\001\002\000\004\057\214\001\002\000\004\057" +
    "\210\001\002\000\010\053\uffbd\054\uffbd\060\uffbd\001\002" +
    "\000\054\005\uffc0\006\uffc0\011\uffc0\012\uffc0\021\uffc0\023" +
    "\uffc0\027\uffc0\035\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\050\uffc0\051\uffc0\057\uffc0\064\uffc0\070\uffc0\071\uffc0\072" +
    "\uffc0\073\uffc0\114\uffc0\001\002\000\004\046\207\001\002" +
    "\000\004\064\uffeb\001\002\000\040\046\uffcf\053\uffcf\054" +
    "\uffcf\060\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\001" +
    "\002\000\004\057\163\001\002\000\004\057\143\001\002" +
    "\000\024\046\uffcc\050\uffcc\051\uffcc\057\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\114\uffcc\001\002\000\004\054\142" +
    "\001\002\000\004\057\126\001\002\000\004\054\124\001" +
    "\002\000\024\046\103\050\043\051\036\057\040\070\045" +
    "\071\070\072\053\073\073\114\041\001\002\000\004\054" +
    "\101\001\002\000\054\005\uffc5\006\uffc5\011\uffc5\012\uffc5" +
    "\021\uffc5\023\uffc5\027\uffc5\035\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\050\uffc5\051\uffc5\057\uffc5\064\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\114\uffc5\001\002\000\036\053" +
    "\uffe0\054\uffe0\060\uffe0\072\106\073\110\074\112\075\111" +
    "\076\121\104\120\105\105\106\115\107\116\110\114\111" +
    "\113\001\002\000\042\053\uffde\054\uffde\060\uffde\070\045" +
    "\071\070\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\104" +
    "\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde\001\002" +
    "\000\036\053\uffe2\054\uffe2\060\uffe2\072\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\076\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2" +
    "\110\uffe2\111\uffe2\001\002\000\024\046\uffd5\050\uffd5\051" +
    "\uffd5\057\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\114\uffd5" +
    "\001\002\000\024\046\uffdb\050\uffdb\051\uffdb\057\uffdb\070" +
    "\uffdb\071\uffdb\072\uffdb\073\uffdb\114\uffdb\001\002\000\024" +
    "\046\103\050\043\051\036\057\040\070\045\071\070\072" +
    "\053\073\073\114\041\001\002\000\024\046\uffda\050\uffda" +
    "\051\uffda\057\uffda\070\uffda\071\uffda\072\uffda\073\uffda\114" +
    "\uffda\001\002\000\024\046\uffd8\050\uffd8\051\uffd8\057\uffd8" +
    "\070\uffd8\071\uffd8\072\uffd8\073\uffd8\114\uffd8\001\002\000" +
    "\024\046\uffd9\050\uffd9\051\uffd9\057\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\114\uffd9\001\002\000\024\046\uffd1\050" +
    "\uffd1\051\uffd1\057\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1" +
    "\114\uffd1\001\002\000\024\046\uffd2\050\uffd2\051\uffd2\057" +
    "\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\114\uffd2\001\002" +
    "\000\024\046\uffd4\050\uffd4\051\uffd4\057\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\114\uffd4\001\002\000\024\046\uffd3" +
    "\050\uffd3\051\uffd3\057\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\114\uffd3\001\002\000\024\046\103\050\043\051\036" +
    "\057\040\070\045\071\070\072\053\073\073\114\041\001" +
    "\002\000\024\046\uffd6\050\uffd6\051\uffd6\057\uffd6\070\uffd6" +
    "\071\uffd6\072\uffd6\073\uffd6\114\uffd6\001\002\000\024\046" +
    "\uffd7\050\uffd7\051\uffd7\057\uffd7\070\uffd7\071\uffd7\072\uffd7" +
    "\073\uffd7\114\uffd7\001\002\000\036\053\uffe4\054\uffe4\060" +
    "\uffe4\072\106\073\110\074\112\075\111\076\121\104\120" +
    "\105\105\106\115\107\116\110\114\111\113\001\002\000" +
    "\036\053\uffe5\054\uffe5\060\uffe5\072\106\073\110\074\112" +
    "\075\111\076\121\104\120\105\105\106\115\107\116\110" +
    "\114\111\113\001\002\000\066\005\042\007\021\010\012" +
    "\011\100\020\007\021\062\023\071\024\006\025\004\027" +
    "\057\030\011\035\072\041\010\043\052\044\063\045\075" +
    "\046\054\050\043\051\036\057\040\064\uffca\070\045\071" +
    "\070\072\053\073\073\114\041\001\002\000\004\064\uffec" +
    "\001\002\000\024\046\054\050\043\051\036\057\040\070" +
    "\045\071\070\072\053\073\073\114\041\001\002\000\004" +
    "\060\141\001\002\000\006\053\133\060\uffae\001\002\000" +
    "\006\053\133\060\uffae\001\002\000\004\060\uffb2\001\002" +
    "\000\024\046\054\050\043\051\036\057\040\070\045\071" +
    "\070\072\053\073\073\114\041\001\002\000\006\053\133" +
    "\060\uffae\001\002\000\006\053\133\060\uffae\001\002\000" +
    "\004\060\uffb0\001\002\000\004\060\uffaf\001\002\000\004" +
    "\060\uffb1\001\002\000\004\054\uffb3\001\002\000\054\005" +
    "\uffc9\006\uffc9\011\uffc9\012\uffc9\021\uffc9\023\uffc9\027\uffc9" +
    "\035\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9\051" +
    "\uffc9\057\uffc9\064\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9" +
    "\114\uffc9\001\002\000\004\046\144\001\002\000\004\060" +
    "\145\001\002\000\004\063\146\001\002\000\010\006\153" +
    "\012\147\064\uffa2\001\002\000\004\065\161\001\002\000" +
    "\004\064\uffa3\001\002\000\010\006\153\012\147\064\uffa2" +
    "\001\002\000\004\064\157\001\002\000\004\050\154\001" +
    "\002\000\004\065\155\001\002\000\054\005\042\006\uffca" +
    "\011\100\012\uffca\021\062\023\071\027\057\035\072\043" +
    "\052\044\063\045\075\046\054\050\043\051\036\057\040" +
    "\064\uffca\070\045\071\070\072\053\073\073\114\041\001" +
    "\002\000\010\006\uffa1\012\uffa1\064\uffa1\001\002\000\054" +
    "\005\uffa5\006\uffa5\011\uffa5\012\uffa5\021\uffa5\023\uffa5\027" +
    "\uffa5\035\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5" +
    "\051\uffa5\057\uffa5\064\uffa5\070\uffa5\071\uffa5\072\uffa5\073" +
    "\uffa5\114\uffa5\001\002\000\004\064\uffa4\001\002\000\050" +
    "\005\042\011\100\021\062\023\071\027\057\035\072\043" +
    "\052\044\063\045\075\046\054\050\043\051\036\057\040" +
    "\064\uffca\070\045\071\070\072\053\073\073\114\041\001" +
    "\002\000\004\064\uffa0\001\002\000\024\046\164\050\043" +
    "\051\036\057\040\070\045\071\070\072\053\073\073\114" +
    "\041\001\002\000\054\054\uffde\056\200\060\uffde\070\045" +
    "\071\070\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077" +
    "\177\100\201\101\202\102\203\103\205\104\uffde\105\uffde" +
    "\106\uffde\107\uffde\110\uffde\111\uffde\001\002\000\004\060" +
    "\166\001\002\000\004\063\167\001\002\000\050\005\042" +
    "\011\100\021\062\023\071\027\057\035\072\043\052\044" +
    "\063\045\075\046\054\050\043\051\036\057\040\064\uffca" +
    "\070\045\071\070\072\053\073\073\114\041\001\002\000" +
    "\004\064\171\001\002\000\056\005\uffab\006\uffab\011\uffab" +
    "\012\uffab\015\172\021\uffab\023\uffab\027\uffab\035\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\050\uffab\051\uffab\057\uffab" +
    "\064\uffab\070\uffab\071\uffab\072\uffab\073\uffab\114\uffab\001" +
    "\002\000\004\063\174\001\002\000\054\005\uffad\006\uffad" +
    "\011\uffad\012\uffad\021\uffad\023\uffad\027\uffad\035\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\050\uffad\051\uffad\057\uffad" +
    "\064\uffad\070\uffad\071\uffad\072\uffad\073\uffad\114\uffad\001" +
    "\002\000\050\005\042\011\100\021\062\023\071\027\057" +
    "\035\072\043\052\044\063\045\075\046\054\050\043\051" +
    "\036\057\040\064\uffca\070\045\071\070\072\053\073\073" +
    "\114\041\001\002\000\004\064\176\001\002\000\054\005" +
    "\uffac\006\uffac\011\uffac\012\uffac\021\uffac\023\uffac\027\uffac" +
    "\035\uffac\043\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051" +
    "\uffac\057\uffac\064\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\114\uffac\001\002\000\024\046\uffbb\050\uffbb\051\uffbb\057" +
    "\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\114\uffbb\001\002" +
    "\000\024\046\uffb6\050\uffb6\051\uffb6\057\uffb6\070\uffb6\071" +
    "\uffb6\072\uffb6\073\uffb6\114\uffb6\001\002\000\024\046\uffba" +
    "\050\uffba\051\uffba\057\uffba\070\uffba\071\uffba\072\uffba\073" +
    "\uffba\114\uffba\001\002\000\024\046\uffb9\050\uffb9\051\uffb9" +
    "\057\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\114\uffb9\001" +
    "\002\000\024\046\uffb8\050\uffb8\051\uffb8\057\uffb8\070\uffb8" +
    "\071\uffb8\072\uffb8\073\uffb8\114\uffb8\001\002\000\024\046" +
    "\103\050\043\051\036\057\040\070\045\071\070\072\053" +
    "\073\073\114\041\001\002\000\024\046\uffb7\050\uffb7\051" +
    "\uffb7\057\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\114\uffb7" +
    "\001\002\000\036\053\uffbc\054\uffbc\060\uffbc\072\106\073" +
    "\110\074\112\075\111\076\121\104\120\105\105\106\115" +
    "\107\116\110\114\111\113\001\002\000\036\053\uffe1\054" +
    "\uffe1\060\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1\001" +
    "\002\000\006\046\212\060\211\001\002\000\004\054\uffb4" +
    "\001\002\000\004\060\213\001\002\000\004\054\uffb5\001" +
    "\002\000\042\007\021\020\007\024\006\025\004\030\011" +
    "\041\010\046\164\050\043\051\036\054\uffa7\057\040\070" +
    "\045\071\070\072\053\073\073\114\041\001\002\000\004" +
    "\046\230\001\002\000\006\054\uffa9\060\uffa9\001\002\000" +
    "\004\054\220\001\002\000\042\007\021\020\007\024\006" +
    "\025\004\030\011\041\010\046\164\050\043\051\036\054" +
    "\uffa7\057\040\070\045\071\070\072\053\073\073\114\041" +
    "\001\002\000\004\054\222\001\002\000\042\007\021\020" +
    "\007\024\006\025\004\030\011\041\010\046\164\050\043" +
    "\051\036\057\040\060\uffa7\070\045\071\070\072\053\073" +
    "\073\114\041\001\002\000\004\060\224\001\002\000\004" +
    "\063\225\001\002\000\050\005\042\011\100\021\062\023" +
    "\071\027\057\035\072\043\052\044\063\045\075\046\054" +
    "\050\043\051\036\057\040\064\uffca\070\045\071\070\072" +
    "\053\073\073\114\041\001\002\000\004\064\227\001\002" +
    "\000\054\005\uffaa\006\uffaa\011\uffaa\012\uffaa\021\uffaa\023" +
    "\uffaa\027\uffaa\035\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\050\uffaa\051\uffaa\057\uffaa\064\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\114\uffaa\001\002\000\004\056\231\001\002" +
    "\000\024\046\103\050\043\051\036\057\040\070\045\071" +
    "\070\072\053\073\073\114\041\001\002\000\034\054\uffa8" +
    "\060\uffa8\072\106\073\110\074\112\075\111\076\121\104" +
    "\120\105\105\106\115\107\116\110\114\111\113\001\002" +
    "\000\006\053\235\054\ufff1\001\002\000\004\054\ufff3\001" +
    "\002\000\004\046\236\001\002\000\010\053\235\054\ufff1" +
    "\056\ufff1\001\002\000\006\054\ufff2\056\ufff2\001\002\000" +
    "\054\005\uffc4\006\uffc4\011\uffc4\012\uffc4\021\uffc4\023\uffc4" +
    "\027\uffc4\035\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\050" +
    "\uffc4\051\uffc4\057\uffc4\064\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\114\uffc4\001\002\000\004\054\uff9f\001\002\000" +
    "\010\006\uffcb\012\uffcb\064\uffcb\001\002\000\026\046\054" +
    "\050\043\051\036\057\040\060\uff9a\070\045\071\070\072" +
    "\053\073\073\114\041\001\002\000\006\053\250\060\uff97" +
    "\001\002\000\004\060\255\001\002\000\006\053\250\060" +
    "\uff97\001\002\000\004\060\uff9c\001\002\000\024\046\054" +
    "\050\043\051\036\057\040\070\045\071\070\072\053\073" +
    "\073\114\041\001\002\000\006\053\250\060\uff97\001\002" +
    "\000\006\053\250\060\uff97\001\002\000\004\060\uff99\001" +
    "\002\000\004\060\uff98\001\002\000\010\053\uff9d\054\uff9d" +
    "\060\uff9d\001\002\000\004\060\uff9b\001\002\000\024\046" +
    "\164\050\043\051\036\057\040\070\045\071\070\072\053" +
    "\073\073\114\041\001\002\000\004\060\261\001\002\000" +
    "\004\063\262\001\002\000\050\005\042\011\100\021\062" +
    "\023\071\027\057\035\072\043\052\044\063\045\075\046" +
    "\054\050\043\051\036\057\040\064\uffca\070\045\071\070" +
    "\072\053\073\073\114\041\001\002\000\004\064\264\001" +
    "\002\000\054\005\uffa6\006\uffa6\011\uffa6\012\uffa6\021\uffa6" +
    "\023\uffa6\027\uffa6\035\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\050\uffa6\051\uffa6\057\uffa6\064\uffa6\070\uffa6\071\uffa6" +
    "\072\uffa6\073\uffa6\114\uffa6\001\002\000\054\005\uffc7\006" +
    "\uffc7\011\uffc7\012\uffc7\021\uffc7\023\uffc7\027\uffc7\035\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\050\uffc7\051\uffc7\057" +
    "\uffc7\064\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\114\uffc7" +
    "\001\002\000\020\002\uffed\007\uffed\020\uffed\024\uffed\025" +
    "\uffed\030\uffed\041\uffed\001\002\000\054\005\uffc3\006\uffc3" +
    "\011\uffc3\012\uffc3\021\uffc3\023\uffc3\027\uffc3\035\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\057\uffc3" +
    "\064\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\114\uffc3\001" +
    "\002\000\054\005\uffc6\006\uffc6\011\uffc6\012\uffc6\021\uffc6" +
    "\023\uffc6\027\uffc6\035\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\050\uffc6\051\uffc6\057\uffc6\064\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\uffc6\114\uffc6\001\002\000\032\060\272\072" +
    "\106\073\110\074\112\075\111\076\121\104\120\105\105" +
    "\106\115\107\116\110\114\111\113\001\002\000\036\053" +
    "\uffe3\054\uffe3\060\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3" +
    "\076\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111" +
    "\uffe3\001\002\000\054\005\uffc8\006\uffc8\011\uffc8\012\uffc8" +
    "\021\uffc8\023\uffc8\027\uffc8\035\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\050\uffc8\051\uffc8\057\uffc8\064\uffc8\070\uffc8" +
    "\071\uffc8\072\uffc8\073\uffc8\114\uffc8\001\002\000\004\060" +
    "\uffe9\001\002\000\016\007\021\020\007\024\006\025\004" +
    "\030\011\041\010\001\002\000\006\053\275\060\uffe6\001" +
    "\002\000\004\060\uffe7\001\002\000\006\053\uffea\060\uffea" +
    "\001\002\000\010\053\235\054\ufff1\057\026\001\002\000" +
    "\004\002\001\001\002\000\004\046\304\001\002\000\006" +
    "\053\235\056\ufff1\001\002\000\004\056\306\001\002\000" +
    "\024\046\103\050\043\051\036\057\040\070\045\071\070" +
    "\072\053\073\073\114\041\001\002\000\032\054\ufff0\072" +
    "\106\073\110\074\112\075\111\076\121\104\120\105\105" +
    "\106\115\107\116\110\114\111\113\001\002\000\020\007" +
    "\021\010\012\020\007\024\006\025\004\030\011\041\010" +
    "\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\022\002\013\003\015\005\012\006\021\007" +
    "\004\010\017\012\016\024\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\022\010\023\012\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\026\013\027\014\030\001\001\000\002\001\001\000" +
    "\004\015\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\060\005\012\006\021\007\075\016\054\021" +
    "\033\022\065\023\076\025\066\026\055\027\073\030\063" +
    "\032\045\033\034\034\050\037\047\041\046\043\064\044" +
    "\036\050\057\052\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\270\021\033\022\065\023\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\103\031\203\001\001\000\006\017\106" +
    "\020\116\001\001\000\042\016\054\021\033\022\065\023" +
    "\076\025\241\026\055\027\073\030\063\033\034\034\050" +
    "\037\047\041\046\043\064\044\036\050\057\052\043\001" +
    "\001\000\016\016\054\021\033\022\065\023\076\027\240" +
    "\030\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\101\021\033\022\065\023\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\106\020\116\001" +
    "\001\000\004\022\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\122\021\033\022" +
    "\065\023\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\121\021\033" +
    "\022\065\023\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\106\020\116\001\001\000\006\017\106" +
    "\020\116\001\001\000\054\003\060\005\012\006\021\007" +
    "\075\016\054\021\033\022\065\023\076\025\066\026\055" +
    "\027\073\030\063\032\124\033\034\034\050\037\047\041" +
    "\046\043\064\044\036\050\057\052\043\001\001\000\002" +
    "\001\001\000\022\016\054\021\033\022\065\023\076\027" +
    "\130\030\063\035\126\052\127\001\001\000\002\001\001" +
    "\000\004\036\137\001\001\000\004\036\131\001\001\000" +
    "\002\001\001\000\020\016\054\021\033\022\065\023\076" +
    "\027\134\030\063\052\133\001\001\000\004\036\136\001" +
    "\001\000\004\036\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\045\151\046\150\047\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\045\157\046\150\047\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\016\054\021\033\022\065\023\076\025\155" +
    "\026\055\027\073\030\063\033\034\034\050\037\047\041" +
    "\046\043\064\044\036\050\057\052\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\016" +
    "\054\021\033\022\065\023\076\025\161\026\055\027\073" +
    "\030\063\033\034\034\050\037\047\041\046\043\064\044" +
    "\036\050\057\052\043\001\001\000\002\001\001\000\016" +
    "\016\054\021\033\022\065\023\076\027\164\030\063\001" +
    "\001\000\006\022\103\031\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\016\054\021\033\022\065\023" +
    "\076\025\167\026\055\027\073\030\063\033\034\034\050" +
    "\037\047\041\046\043\064\044\036\050\057\052\043\001" +
    "\001\000\002\001\001\000\004\040\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\016\054\021\033\022" +
    "\065\023\076\025\174\026\055\027\073\030\063\033\034" +
    "\034\050\037\047\041\046\043\064\044\036\050\057\052" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\205\021\033\022\065" +
    "\023\076\001\001\000\002\001\001\000\006\017\106\020" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\214\016\054\021\033\022\065\023\076\027\215\030\063" +
    "\042\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\214\016\054\021\033\022\065" +
    "\023\076\027\215\030\063\042\220\001\001\000\002\001" +
    "\001\000\022\003\214\016\054\021\033\022\065\023\076" +
    "\027\215\030\063\042\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\016\054\021\033\022\065\023\076" +
    "\025\225\026\055\027\073\030\063\033\034\034\050\037" +
    "\047\041\046\043\064\044\036\050\057\052\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\231\021\033\022\065\023\076\001\001\000\006" +
    "\017\106\020\116\001\001\000\004\051\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\054\021\033\022\065\023\076" +
    "\027\245\030\063\052\243\053\244\001\001\000\004\054" +
    "\255\001\001\000\002\001\001\000\004\054\246\001\001" +
    "\000\002\001\001\000\020\016\054\021\033\022\065\023" +
    "\076\027\251\030\063\052\250\001\001\000\004\054\253" +
    "\001\001\000\004\054\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\054\021\033\022\065\023\076\027\257\030\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\016\054" +
    "\021\033\022\065\023\076\025\262\026\055\027\073\030" +
    "\063\033\034\034\050\037\047\041\046\043\064\044\036" +
    "\050\057\052\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\106\020\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\026\013\275\001\001\000\004\015\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\304\001" +
    "\001\000\002\001\001\000\012\016\306\021\033\022\065" +
    "\023\076\001\001\000\006\017\106\020\116\001\001\000" +
    "\020\003\015\005\012\006\021\007\004\010\017\012\016" +
    "\024\310\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= innit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // key_types ::= KEY_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // key_types ::= KEY_VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // key_types ::= KEY_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // key_types ::= KEY_LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // key_types ::= KEY_SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // key_types ::= KEY_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // innit ::= body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("innit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= declaration OP_SEMICOL body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= functions_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarations_block ::= declaration OP_SEMICOL declarations_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations_block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarations_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations_block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= const_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable_declaration ::= key_types ID add_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // add_id ::= OP_COMA ID add_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_id",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // add_id ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_id",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // const_declaration ::= KEY_CONST key_types ID add_id OP_ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functions_block ::= function_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // functions_block ::= function_statement functions_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_statement ::= key_types ID OP_PAR_OPEN parameters OP_PAR_CLOSE OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_body ::= declaration OP_SEMICOL function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_body ::= block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameter ::= key_types ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= parameter add_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // add_parameter ::= OP_COMA parameter add_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_parameter",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // add_parameter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_parameter",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression arithmetic_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression logic_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= OP_PAR_OPEN expression OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= ID postfix_operator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= postfix_operator ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= unary_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operand ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operand ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithmetic_operator ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arithmetic_operator ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arithmetic_operator ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arithmetic_operator ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arithmetic_operator ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // logic_operator ::= OP_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // logic_operator ::= OP_GRE_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logic_operator ::= OP_GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logic_operator ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logic_operator ::= OP_LESS_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logic_operator ::= OP_NOT_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // postfix_operator ::= OP_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // postfix_operator ::= OP_DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unary_operator ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unary_operator ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unary_operator ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // block_statement ::= statement block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // block_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= expression_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= read_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= write_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= KEY_BREAK OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= KEY_CONT OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= return_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= call_function_satatement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= switch_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_statement ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_statement ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment_expression ::= ID assignment_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment_operator ::= OP_ADD_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment_operator ::= OP_SUB_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment_operator ::= OP_MULT_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment_operator ::= OP_DIV_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment_operator ::= OP_MOD_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_operator ::= OP_ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // read_statement ::= KEY_READ OP_PAR_OPEN ID OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // read_statement ::= KEY_READ OP_PAR_OPEN OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // write_statement ::= KEY_WRITE OP_PAR_OPEN write_parameters OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // write_parameters ::= expression_statement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // write_parameters ::= call_function_satatement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // write_parameters_list ::= OP_COMA expression_statement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // write_parameters_list ::= OP_COMA call_function_satatement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // write_parameters_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters_list",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_statement ::= KEY_IF OP_PAR_OPEN expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // else_statement ::= KEY_ELSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_statement ::= KEY_FOR OP_PAR_OPEN for_expression_statement OP_SEMICOL for_expression_statement OP_SEMICOL for_expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_expression_statement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_expression_statement ::= key_types ID OP_ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_expression_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while_statement ::= KEY_WHILE OP_PAR_OPEN expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN ID OP_PAR_CLOSE OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_blocks ::= case case_blocks 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case_blocks ::= default 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_blocks ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case ::= KEY_CASE INT OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // default ::= KEY_DEF OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // return_statement ::= KEY_RET expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // return_statement ::= KEY_RET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // call_function_satatement ::= ID OP_PAR_OPEN input_parameters OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_function_satatement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // input_parameters ::= expression_statement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // input_parameters ::= call_function_satatement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // input_parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // add_input_parameter ::= OP_COMA expression_statement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_input_parameter",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // add_input_parameter ::= OP_COMA call_function_satatement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_input_parameter",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // add_input_parameter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_input_parameter",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
