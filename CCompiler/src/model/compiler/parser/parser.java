
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package model.compiler.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import model.compiler.scanner.Token;
import model.compiler.translator.Translator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\002\003\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\006\003\000\002\006\003\000\002" +
    "\053\002\000\002\005\006\000\002\054\002\000\002\047" +
    "\006\000\002\047\002\000\002\055\002\000\002\056\002" +
    "\000\002\004\012\000\002\007\003\000\002\007\004\000" +
    "\002\057\002\000\002\060\002\000\002\010\014\000\002" +
    "\010\012\000\002\010\011\000\002\010\010\000\002\030" +
    "\005\000\002\030\003\000\002\011\004\000\002\012\004" +
    "\000\002\012\002\000\002\013\005\000\002\013\002\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\061\002\000\002\014\005\000\002\014\004\000\002\014" +
    "\004\000\002\014\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\023\004\000\002\023\002\000\002\024" +
    "\004\000\002\024\004\000\002\024\004\000\002\062\002" +
    "\000\002\024\005\000\002\063\002\000\002\024\005\000" +
    "\002\024\004\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\003\000\002\025" +
    "\003\000\002\064\002\000\002\026\006\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\031\006\000\002\031\005\000\002" +
    "\031\006\000\002\065\002\000\002\032\007\000\002\032" +
    "\006\000\002\033\004\000\002\034\005\000\002\034\002" +
    "\000\002\066\002\000\002\067\002\000\002\035\014\000" +
    "\002\035\012\000\002\035\011\000\002\035\010\000\002" +
    "\070\002\000\002\036\007\000\002\036\006\000\002\036" +
    "\002\000\002\037\015\000\002\037\011\000\002\037\010" +
    "\000\002\037\007\000\002\040\003\000\002\040\006\000" +
    "\002\040\002\000\002\071\002\000\002\072\002\000\002" +
    "\041\013\000\002\041\011\000\002\041\010\000\002\041" +
    "\007\000\002\042\011\000\002\042\011\000\002\042\010" +
    "\000\002\042\007\000\002\043\004\000\002\043\003\000" +
    "\002\043\002\000\002\044\006\000\002\044\010\000\002" +
    "\044\006\000\002\044\010\000\002\045\005\000\002\045" +
    "\007\000\002\045\006\000\002\045\010\000\002\046\004" +
    "\000\002\046\003\000\002\073\002\000\002\050\007\000" +
    "\002\050\006\000\002\051\004\000\002\051\002\000\002" +
    "\052\005\000\002\052\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\020\003\016\007\022\010\010\024\006\025" +
    "\004\030\011\041\007\001\002\000\004\046\ufffd\001\002" +
    "\000\004\054\u0122\001\002\000\004\046\000\001\002\000" +
    "\004\046\uffff\001\002\000\014\007\022\024\006\025\004" +
    "\030\011\041\007\001\002\000\004\046\ufffc\001\002\000" +
    "\004\054\ufff6\001\002\000\004\002\u011a\001\002\000\004" +
    "\002\ufffb\001\002\000\004\046\u0119\001\002\000\004\054" +
    "\u0117\001\002\000\016\002\uffed\007\022\024\006\025\004" +
    "\030\011\041\007\001\002\000\004\002\ufff8\001\002\000" +
    "\004\054\ufff7\001\002\000\004\046\ufffe\001\002\000\004" +
    "\002\uffec\001\002\000\004\046\025\001\002\000\004\057" +
    "\026\001\002\000\020\003\027\007\uffeb\024\uffeb\025\uffeb" +
    "\030\uffeb\041\uffeb\060\uffeb\001\002\000\070\005\052\007" +
    "\022\010\010\011\110\021\071\023\101\024\006\025\004" +
    "\027\066\030\011\035\102\041\007\043\061\044\072\045" +
    "\105\046\063\050\053\051\046\057\050\060\u0110\063\u010f" +
    "\064\uffbf\070\055\071\100\072\062\073\104\114\051\001" +
    "\002\000\016\007\022\024\006\025\004\030\011\041\007" +
    "\060\uffe1\001\002\000\004\060\041\001\002\000\004\046" +
    "\040\001\002\000\006\053\035\060\uffdf\001\002\000\004" +
    "\060\uffe2\001\002\000\014\007\022\024\006\025\004\030" +
    "\011\041\007\001\002\000\006\053\035\060\uffdf\001\002" +
    "\000\004\060\uffe0\001\002\000\006\053\uffe3\060\uffe3\001" +
    "\002\000\004\063\uffea\001\002\000\004\063\043\001\002" +
    "\000\064\005\052\007\022\010\010\011\110\021\071\023" +
    "\101\024\006\025\004\027\066\030\011\035\102\041\007" +
    "\043\061\044\072\045\105\046\063\050\053\051\046\057" +
    "\050\064\uffbf\070\055\071\100\072\062\073\104\114\051" +
    "\001\002\000\042\053\uffd7\054\uffd7\060\uffd7\072\uffd7\073" +
    "\uffd7\074\uffd7\075\uffd7\076\uffd7\104\uffd7\105\uffd7\106\uffd7" +
    "\107\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7\001\002\000" +
    "\004\054\u010d\001\002\000\042\053\uffd4\054\uffd4\060\uffd4" +
    "\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\104\uffd4\105" +
    "\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4" +
    "\001\002\000\054\005\uffb3\006\uffb3\011\uffb3\012\uffb3\021" +
    "\uffb3\023\uffb3\027\uffb3\035\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\050\uffb3\051\uffb3\057\uffb3\064\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\114\uffb3\001\002\000\024\046\114" +
    "\050\053\051\046\057\050\070\055\071\100\072\062\073" +
    "\104\114\051\001\002\000\024\046\uffc3\050\uffc3\051\uffc3" +
    "\057\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\114\uffc3\001" +
    "\002\000\004\054\uffbb\001\002\000\042\053\uffd5\054\uffd5" +
    "\060\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\104" +
    "\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5" +
    "\113\uffd5\001\002\000\004\064\u0108\001\002\000\044\046" +
    "\uffc5\053\uffc5\054\uffc5\060\uffc5\072\uffc5\073\uffc5\074\uffc5" +
    "\075\uffc5\076\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110" +
    "\uffc5\111\uffc5\112\uffc5\113\uffc5\001\002\000\054\005\uffb5" +
    "\006\uffb5\011\uffb5\012\uffb5\021\uffb5\023\uffb5\027\uffb5\035" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5" +
    "\057\uffb5\064\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\114" +
    "\uffb5\001\002\000\054\005\uffb6\006\uffb6\011\uffb6\012\uffb6" +
    "\021\uffb6\023\uffb6\027\uffb6\035\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\050\uffb6\051\uffb6\057\uffb6\064\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\114\uffb6\001\002\000\004\054" +
    "\u0107\001\002\000\004\057\365\001\002\000\024\046\uffc2" +
    "\050\uffc2\051\uffc2\057\uffc2\070\uffc2\071\uffc2\072\uffc2\073" +
    "\uffc2\114\uffc2\001\002\000\062\053\uffd6\054\uffd6\056\uffb0" +
    "\057\115\060\uffd6\070\uffdb\071\uffdb\072\uffd6\073\uffd6\074" +
    "\uffd6\075\uffd6\076\uffd6\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111\uffd6\112" +
    "\uffd6\113\uffd6\001\002\000\042\053\uffb2\054\uffb2\060\uffb2" +
    "\072\134\073\135\074\137\075\136\076\150\104\146\105" +
    "\132\106\142\107\144\110\141\111\140\112\147\113\143" +
    "\001\002\000\054\005\052\006\uffbf\011\110\012\uffbf\021" +
    "\071\023\101\027\066\035\102\043\061\044\072\045\105" +
    "\046\063\050\053\051\046\057\050\064\uffbf\070\055\071" +
    "\100\072\062\073\104\114\051\001\002\000\026\046\063" +
    "\050\053\051\046\054\uff79\057\050\070\055\071\100\072" +
    "\062\073\104\114\051\001\002\000\004\054\352\001\002" +
    "\000\004\046\343\001\002\000\004\057\312\001\002\000" +
    "\004\057\304\001\002\000\042\053\uffd3\054\uffd3\060\uffd3" +
    "\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\104\uffd3\105" +
    "\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3" +
    "\001\002\000\010\053\uffb1\054\uffb1\060\uffb1\001\002\000" +
    "\054\005\uffb4\006\uffb4\011\uffb4\012\uffb4\021\uffb4\023\uffb4" +
    "\027\uffb4\035\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\050" +
    "\uffb4\051\uffb4\057\uffb4\064\uffb4\070\uffb4\071\uffb4\072\uffb4" +
    "\073\uffb4\114\uffb4\001\002\000\004\046\303\001\002\000" +
    "\004\064\uffe4\001\002\000\044\046\uffc4\053\uffc4\054\uffc4" +
    "\060\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\104" +
    "\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4" +
    "\113\uffc4\001\002\000\004\057\245\001\002\000\004\057" +
    "\171\001\002\000\004\054\170\001\002\000\024\046\uffc1" +
    "\050\uffc1\051\uffc1\057\uffc1\070\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\114\uffc1\001\002\000\004\057\155\001\002\000\004" +
    "\054\153\001\002\000\024\046\114\050\053\051\046\057" +
    "\050\070\055\071\100\072\062\073\104\114\051\001\002" +
    "\000\004\054\uffb9\001\002\000\004\054\112\001\002\000" +
    "\054\005\uffb8\006\uffb8\011\uffb8\012\uffb8\021\uffb8\023\uffb8" +
    "\027\uffb8\035\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050" +
    "\uffb8\051\uffb8\057\uffb8\064\uffb8\070\uffb8\071\uffb8\072\uffb8" +
    "\073\uffb8\114\uffb8\001\002\000\042\053\uffd8\054\uffd8\060" +
    "\uffd8\072\134\073\135\074\137\075\136\076\150\104\146" +
    "\105\132\106\142\107\144\110\141\111\140\112\147\113" +
    "\143\001\002\000\050\053\uffd6\054\uffd6\057\115\060\uffd6" +
    "\070\uffdb\071\uffdb\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076" +
    "\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111\uffd6" +
    "\112\uffd6\113\uffd6\001\002\000\030\003\120\046\uff78\050" +
    "\uff78\051\uff78\057\uff78\060\uff78\070\uff78\071\uff78\072\uff78" +
    "\073\uff78\114\uff78\001\002\000\006\070\055\071\100\001" +
    "\002\000\042\053\uffda\054\uffda\060\uffda\072\uffda\073\uffda" +
    "\074\uffda\075\uffda\076\uffda\104\uffda\105\uffda\106\uffda\107" +
    "\uffda\110\uffda\111\uffda\112\uffda\113\uffda\001\002\000\004" +
    "\060\131\001\002\000\026\046\063\050\053\051\046\057" +
    "\050\060\uff74\070\055\071\100\072\062\073\104\114\051" +
    "\001\002\000\004\060\130\001\002\000\006\053\125\060" +
    "\uff72\001\002\000\004\060\uff75\001\002\000\024\046\063" +
    "\050\053\051\046\057\050\070\055\071\100\072\062\073" +
    "\104\114\051\001\002\000\006\053\125\060\uff72\001\002" +
    "\000\004\060\uff73\001\002\000\042\053\uff77\054\uff77\060" +
    "\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77\104\uff77" +
    "\105\uff77\106\uff77\107\uff77\110\uff77\111\uff77\112\uff77\113" +
    "\uff77\001\002\000\042\053\uff76\054\uff76\060\uff76\072\uff76" +
    "\073\uff76\074\uff76\075\uff76\076\uff76\104\uff76\105\uff76\106" +
    "\uff76\107\uff76\110\uff76\111\uff76\112\uff76\113\uff76\001\002" +
    "\000\024\046\uffcc\050\uffcc\051\uffcc\057\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\114\uffcc\001\002\000\024\046\114" +
    "\050\053\051\046\057\050\070\055\071\100\072\062\073" +
    "\104\114\051\001\002\000\024\046\uffd2\050\uffd2\051\uffd2" +
    "\057\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\114\uffd2\001" +
    "\002\000\024\046\uffd1\050\uffd1\051\uffd1\057\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\114\uffd1\001\002\000\024\046" +
    "\uffcf\050\uffcf\051\uffcf\057\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\073\uffcf\114\uffcf\001\002\000\024\046\uffd0\050\uffd0\051" +
    "\uffd0\057\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\114\uffd0" +
    "\001\002\000\024\046\uffc8\050\uffc8\051\uffc8\057\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\114\uffc8\001\002\000\024" +
    "\046\uffc9\050\uffc9\051\uffc9\057\uffc9\070\uffc9\071\uffc9\072" +
    "\uffc9\073\uffc9\114\uffc9\001\002\000\024\046\uffcb\050\uffcb" +
    "\051\uffcb\057\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\114" +
    "\uffcb\001\002\000\024\046\uffc6\050\uffc6\051\uffc6\057\uffc6" +
    "\070\uffc6\071\uffc6\072\uffc6\073\uffc6\114\uffc6\001\002\000" +
    "\024\046\uffca\050\uffca\051\uffca\057\uffca\070\uffca\071\uffca" +
    "\072\uffca\073\uffca\114\uffca\001\002\000\024\046\114\050" +
    "\053\051\046\057\050\070\055\071\100\072\062\073\104" +
    "\114\051\001\002\000\024\046\uffcd\050\uffcd\051\uffcd\057" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\114\uffcd\001\002" +
    "\000\024\046\uffc7\050\uffc7\051\uffc7\057\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\114\uffc7\001\002\000\024\046\uffce" +
    "\050\uffce\051\uffce\057\uffce\070\uffce\071\uffce\072\uffce\073" +
    "\uffce\114\uffce\001\002\000\042\053\uffdd\054\uffdd\060\uffdd" +
    "\072\134\073\135\074\137\075\136\076\150\104\146\105" +
    "\132\106\142\107\144\110\141\111\140\112\147\113\143" +
    "\001\002\000\042\053\uffde\054\uffde\060\uffde\072\134\073" +
    "\135\074\137\075\136\076\150\104\146\105\132\106\142" +
    "\107\144\110\141\111\140\112\147\113\143\001\002\000" +
    "\064\005\052\007\022\010\010\011\110\021\071\023\101" +
    "\024\006\025\004\027\066\030\011\035\102\041\007\043" +
    "\061\044\072\045\105\046\063\050\053\051\046\057\050" +
    "\064\uffbf\070\055\071\100\072\062\073\104\114\051\001" +
    "\002\000\004\064\uffe5\001\002\000\026\003\157\046\uffa6" +
    "\050\uffa6\051\uffa6\057\uffa6\070\uffa6\071\uffa6\072\uffa6\073" +
    "\uffa6\114\uffa6\001\002\000\024\046\063\050\053\051\046" +
    "\057\050\070\055\071\100\072\062\073\104\114\051\001" +
    "\002\000\004\060\160\001\002\000\004\054\uffa4\001\002" +
    "\000\004\060\167\001\002\000\006\053\164\060\uffa1\001" +
    "\002\000\004\060\uffa3\001\002\000\024\046\063\050\053" +
    "\051\046\057\050\070\055\071\100\072\062\073\104\114" +
    "\051\001\002\000\006\053\164\060\uffa1\001\002\000\004" +
    "\060\uffa2\001\002\000\004\054\uffa5\001\002\000\054\005" +
    "\uffbe\006\uffbe\011\uffbe\012\uffbe\021\uffbe\023\uffbe\027\uffbe" +
    "\035\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051" +
    "\uffbe\057\uffbe\064\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe" +
    "\114\uffbe\001\002\000\006\003\173\046\172\001\002\000" +
    "\004\060\241\001\002\000\014\006\201\012\175\060\174" +
    "\063\176\064\uff83\001\002\000\004\063\236\001\002\000" +
    "\006\003\223\065\224\001\002\000\010\006\201\012\175" +
    "\064\uff83\001\002\000\004\064\uff84\001\002\000\010\006" +
    "\201\012\175\064\uff83\001\002\000\006\003\204\050\205" +
    "\001\002\000\004\064\203\001\002\000\054\005\uff86\006" +
    "\uff86\011\uff86\012\uff86\021\uff86\023\uff86\027\uff86\035\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\050\uff86\051\uff86\057" +
    "\uff86\064\uff86\070\uff86\071\uff86\072\uff86\073\uff86\114\uff86" +
    "\001\002\000\004\065\213\001\002\000\004\065\206\001" +
    "\002\000\056\005\052\006\uffbf\011\110\012\uffbf\021\071" +
    "\023\101\027\066\035\102\043\061\044\072\045\105\046" +
    "\063\050\053\051\046\057\050\063\207\064\uffbf\070\055" +
    "\071\100\072\062\073\104\114\051\001\002\000\050\005" +
    "\052\011\110\021\071\023\101\027\066\035\102\043\061" +
    "\044\072\045\105\046\063\050\053\051\046\057\050\064" +
    "\uffbf\070\055\071\100\072\062\073\104\114\051\001\002" +
    "\000\010\006\uff82\012\uff82\064\uff82\001\002\000\004\064" +
    "\212\001\002\000\010\006\uff81\012\uff81\064\uff81\001\002" +
    "\000\056\005\052\006\uffbf\011\110\012\uffbf\021\071\023" +
    "\101\027\066\035\102\043\061\044\072\045\105\046\063" +
    "\050\053\051\046\057\050\063\214\064\uffbf\070\055\071" +
    "\100\072\062\073\104\114\051\001\002\000\050\005\052" +
    "\011\110\021\071\023\101\027\066\035\102\043\061\044" +
    "\072\045\105\046\063\050\053\051\046\057\050\064\uffbf" +
    "\070\055\071\100\072\062\073\104\114\051\001\002\000" +
    "\010\006\uff80\012\uff80\064\uff80\001\002\000\004\064\217" +
    "\001\002\000\010\006\uff7f\012\uff7f\064\uff7f\001\002\000" +
    "\004\064\uff85\001\002\000\004\064\222\001\002\000\054" +
    "\005\uff87\006\uff87\011\uff87\012\uff87\021\uff87\023\uff87\027" +
    "\uff87\035\uff87\043\uff87\044\uff87\045\uff87\046\uff87\050\uff87" +
    "\051\uff87\057\uff87\064\uff87\070\uff87\071\uff87\072\uff87\073" +
    "\uff87\114\uff87\001\002\000\004\065\231\001\002\000\052" +
    "\005\052\011\110\021\071\023\101\027\066\035\102\043" +
    "\061\044\072\045\105\046\063\050\053\051\046\057\050" +
    "\063\225\064\uffbf\070\055\071\100\072\062\073\104\114" +
    "\051\001\002\000\050\005\052\011\110\021\071\023\101" +
    "\027\066\035\102\043\061\044\072\045\105\046\063\050" +
    "\053\051\046\057\050\064\uffbf\070\055\071\100\072\062" +
    "\073\104\114\051\001\002\000\004\064\uff7e\001\002\000" +
    "\004\064\230\001\002\000\004\064\uff7d\001\002\000\052" +
    "\005\052\011\110\021\071\023\101\027\066\035\102\043" +
    "\061\044\072\045\105\046\063\050\053\051\046\057\050" +
    "\063\232\064\uffbf\070\055\071\100\072\062\073\104\114" +
    "\051\001\002\000\050\005\052\011\110\021\071\023\101" +
    "\027\066\035\102\043\061\044\072\045\105\046\063\050" +
    "\053\051\046\057\050\064\uffbf\070\055\071\100\072\062" +
    "\073\104\114\051\001\002\000\004\064\uff7c\001\002\000" +
    "\004\064\235\001\002\000\004\064\uff7b\001\002\000\010" +
    "\006\201\012\175\064\uff83\001\002\000\004\064\240\001" +
    "\002\000\054\005\uff88\006\uff88\011\uff88\012\uff88\021\uff88" +
    "\023\uff88\027\uff88\035\uff88\043\uff88\044\uff88\045\uff88\046" +
    "\uff88\050\uff88\051\uff88\057\uff88\064\uff88\070\uff88\071\uff88" +
    "\072\uff88\073\uff88\114\uff88\001\002\000\004\063\242\001" +
    "\002\000\010\006\201\012\175\064\uff83\001\002\000\004" +
    "\064\244\001\002\000\054\005\uff89\006\uff89\011\uff89\012" +
    "\uff89\021\uff89\023\uff89\027\uff89\035\uff89\043\uff89\044\uff89" +
    "\045\uff89\046\uff89\050\uff89\051\uff89\057\uff89\064\uff89\070" +
    "\uff89\071\uff89\072\uff89\073\uff89\114\uff89\001\002\000\026" +
    "\003\246\046\uffa0\050\uffa0\051\uffa0\057\uffa0\070\uffa0\071" +
    "\uffa0\072\uffa0\073\uffa0\114\uffa0\001\002\000\054\005\052" +
    "\011\110\021\071\023\101\027\066\035\102\043\061\044" +
    "\072\045\105\046\063\050\053\051\046\057\050\060\270" +
    "\063\267\064\uffbf\070\055\071\100\072\062\073\104\114" +
    "\051\001\002\000\024\046\063\050\053\051\046\057\050" +
    "\070\055\071\100\072\062\073\104\114\051\001\002\000" +
    "\004\060\251\001\002\000\004\063\252\001\002\000\050" +
    "\005\uff9f\011\uff9f\021\uff9f\023\uff9f\027\uff9f\035\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\057\uff9f" +
    "\064\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\114\uff9f\001" +
    "\002\000\050\005\052\011\110\021\071\023\101\027\066" +
    "\035\102\043\061\044\072\045\105\046\063\050\053\051" +
    "\046\057\050\064\uffbf\070\055\071\100\072\062\073\104" +
    "\114\051\001\002\000\004\064\255\001\002\000\056\005" +
    "\uff97\006\uff97\011\uff97\012\uff97\015\256\021\uff97\023\uff97" +
    "\027\uff97\035\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050" +
    "\uff97\051\uff97\057\uff97\064\uff97\070\uff97\071\uff97\072\uff97" +
    "\073\uff97\114\uff97\001\002\000\006\003\261\063\260\001" +
    "\002\000\054\005\uff9e\006\uff9e\011\uff9e\012\uff9e\021\uff9e" +
    "\023\uff9e\027\uff9e\035\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\050\uff9e\051\uff9e\057\uff9e\064\uff9e\070\uff9e\071\uff9e" +
    "\072\uff9e\073\uff9e\114\uff9e\001\002\000\050\005\uff9a\011" +
    "\uff9a\021\uff9a\023\uff9a\027\uff9a\035\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\050\uff9a\051\uff9a\057\uff9a\064\uff9a\070" +
    "\uff9a\071\uff9a\072\uff9a\073\uff9a\114\uff9a\001\002\000\050" +
    "\005\052\011\110\021\071\023\101\027\066\035\102\043" +
    "\061\044\072\045\105\046\063\050\053\051\046\057\050" +
    "\064\uffbf\070\055\071\100\072\062\073\104\114\051\001" +
    "\002\000\004\064\263\001\002\000\054\005\uff98\006\uff98" +
    "\011\uff98\012\uff98\021\uff98\023\uff98\027\uff98\035\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\050\uff98\051\uff98\057\uff98" +
    "\064\uff98\070\uff98\071\uff98\072\uff98\073\uff98\114\uff98\001" +
    "\002\000\050\005\052\011\110\021\071\023\101\027\066" +
    "\035\102\043\061\044\072\045\105\046\063\050\053\051" +
    "\046\057\050\064\uffbf\070\055\071\100\072\062\073\104" +
    "\114\051\001\002\000\004\064\266\001\002\000\054\005" +
    "\uff99\006\uff99\011\uff99\012\uff99\021\uff99\023\uff99\027\uff99" +
    "\035\uff99\043\uff99\044\uff99\045\uff99\046\uff99\050\uff99\051" +
    "\uff99\057\uff99\064\uff99\070\uff99\071\uff99\072\uff99\073\uff99" +
    "\114\uff99\001\002\000\050\005\052\011\110\021\071\023" +
    "\101\027\066\035\102\043\061\044\072\045\105\046\063" +
    "\050\053\051\046\057\050\064\uffbf\070\055\071\100\072" +
    "\062\073\104\114\051\001\002\000\004\063\274\001\002" +
    "\000\004\064\272\001\002\000\056\005\uff97\006\uff97\011" +
    "\uff97\012\uff97\015\256\021\uff97\023\uff97\027\uff97\035\uff97" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97\057" +
    "\uff97\064\uff97\070\uff97\071\uff97\072\uff97\073\uff97\114\uff97" +
    "\001\002\000\054\005\uff9b\006\uff9b\011\uff9b\012\uff9b\021" +
    "\uff9b\023\uff9b\027\uff9b\035\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\050\uff9b\051\uff9b\057\uff9b\064\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\114\uff9b\001\002\000\050\005\052" +
    "\011\110\021\071\023\101\027\066\035\102\043\061\044" +
    "\072\045\105\046\063\050\053\051\046\057\050\064\uffbf" +
    "\070\055\071\100\072\062\073\104\114\051\001\002\000" +
    "\004\064\276\001\002\000\056\005\uff97\006\uff97\011\uff97" +
    "\012\uff97\015\256\021\uff97\023\uff97\027\uff97\035\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97\057\uff97" +
    "\064\uff97\070\uff97\071\uff97\072\uff97\073\uff97\114\uff97\001" +
    "\002\000\054\005\uff9d\006\uff9d\011\uff9d\012\uff9d\021\uff9d" +
    "\023\uff9d\027\uff9d\035\uff9d\043\uff9d\044\uff9d\045\uff9d\046" +
    "\uff9d\050\uff9d\051\uff9d\057\uff9d\064\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\114\uff9d\001\002\000\004\064\301\001" +
    "\002\000\056\005\uff97\006\uff97\011\uff97\012\uff97\015\256" +
    "\021\uff97\023\uff97\027\uff97\035\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\050\uff97\051\uff97\057\uff97\064\uff97\070\uff97" +
    "\071\uff97\072\uff97\073\uff97\114\uff97\001\002\000\054\005" +
    "\uff9c\006\uff9c\011\uff9c\012\uff9c\021\uff9c\023\uff9c\027\uff9c" +
    "\035\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051" +
    "\uff9c\057\uff9c\064\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\114\uff9c\001\002\000\042\053\uffd9\054\uffd9\060\uffd9\072" +
    "\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\104\uffd9\105\uffd9" +
    "\106\uffd9\107\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\001" +
    "\002\000\010\003\307\046\305\060\306\001\002\000\004" +
    "\060\311\001\002\000\004\054\uffa8\001\002\000\004\060" +
    "\310\001\002\000\004\054\uffa7\001\002\000\004\054\uffa9" +
    "\001\002\000\042\003\315\007\022\024\006\025\004\030" +
    "\011\041\007\046\063\050\053\051\046\054\uff90\057\050" +
    "\070\055\071\100\072\062\073\104\114\051\001\002\000" +
    "\004\046\340\001\002\000\006\054\uff92\060\uff92\001\002" +
    "\000\054\005\052\011\110\021\071\023\101\027\066\035" +
    "\102\043\061\044\072\045\105\046\063\050\053\051\046" +
    "\057\050\060\330\063\327\064\uffbf\070\055\071\100\072" +
    "\062\073\104\114\051\001\002\000\004\054\317\001\002" +
    "\000\040\007\022\024\006\025\004\030\011\041\007\046" +
    "\063\050\053\051\046\054\uff90\057\050\070\055\071\100" +
    "\072\062\073\104\114\051\001\002\000\004\054\321\001" +
    "\002\000\040\007\022\024\006\025\004\030\011\041\007" +
    "\046\063\050\053\051\046\057\050\060\uff90\070\055\071" +
    "\100\072\062\073\104\114\051\001\002\000\004\060\323" +
    "\001\002\000\004\063\324\001\002\000\050\005\052\011" +
    "\110\021\071\023\101\027\066\035\102\043\061\044\072" +
    "\045\105\046\063\050\053\051\046\057\050\064\uffbf\070" +
    "\055\071\100\072\062\073\104\114\051\001\002\000\004" +
    "\064\326\001\002\000\054\005\uff96\006\uff96\011\uff96\012" +
    "\uff96\021\uff96\023\uff96\027\uff96\035\uff96\043\uff96\044\uff96" +
    "\045\uff96\046\uff96\050\uff96\051\uff96\057\uff96\064\uff96\070" +
    "\uff96\071\uff96\072\uff96\073\uff96\114\uff96\001\002\000\050" +
    "\005\052\011\110\021\071\023\101\027\066\035\102\043" +
    "\061\044\072\045\105\046\063\050\053\051\046\057\050" +
    "\064\uffbf\070\055\071\100\072\062\073\104\114\051\001" +
    "\002\000\004\063\333\001\002\000\004\064\332\001\002" +
    "\000\054\005\uff93\006\uff93\011\uff93\012\uff93\021\uff93\023" +
    "\uff93\027\uff93\035\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\050\uff93\051\uff93\057\uff93\064\uff93\070\uff93\071\uff93\072" +
    "\uff93\073\uff93\114\uff93\001\002\000\050\005\052\011\110" +
    "\021\071\023\101\027\066\035\102\043\061\044\072\045" +
    "\105\046\063\050\053\051\046\057\050\064\uffbf\070\055" +
    "\071\100\072\062\073\104\114\051\001\002\000\004\064" +
    "\335\001\002\000\054\005\uff95\006\uff95\011\uff95\012\uff95" +
    "\021\uff95\023\uff95\027\uff95\035\uff95\043\uff95\044\uff95\045" +
    "\uff95\046\uff95\050\uff95\051\uff95\057\uff95\064\uff95\070\uff95" +
    "\071\uff95\072\uff95\073\uff95\114\uff95\001\002\000\004\064" +
    "\337\001\002\000\054\005\uff94\006\uff94\011\uff94\012\uff94" +
    "\021\uff94\023\uff94\027\uff94\035\uff94\043\uff94\044\uff94\045" +
    "\uff94\046\uff94\050\uff94\051\uff94\057\uff94\064\uff94\070\uff94" +
    "\071\uff94\072\uff94\073\uff94\114\uff94\001\002\000\004\056" +
    "\341\001\002\000\024\046\114\050\053\051\046\057\050" +
    "\070\055\071\100\072\062\073\104\114\051\001\002\000" +
    "\040\054\uff91\060\uff91\072\134\073\135\074\137\075\136" +
    "\076\150\104\146\105\132\106\142\107\144\110\141\111" +
    "\140\112\147\113\143\001\002\000\006\053\ufff5\054\ufff5" +
    "\001\002\000\006\053\346\054\ufff1\001\002\000\004\054" +
    "\ufff4\001\002\000\004\046\347\001\002\000\010\053\ufff3" +
    "\054\ufff3\056\ufff3\001\002\000\010\053\346\054\ufff1\056" +
    "\ufff1\001\002\000\006\054\ufff2\056\ufff2\001\002\000\054" +
    "\005\uffb7\006\uffb7\011\uffb7\012\uffb7\021\uffb7\023\uffb7\027" +
    "\uffb7\035\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\050\uffb7" +
    "\051\uffb7\057\uffb7\064\uffb7\070\uffb7\071\uffb7\072\uffb7\073" +
    "\uffb7\114\uffb7\001\002\000\004\054\uff7a\001\002\000\010" +
    "\006\uffc0\012\uffc0\064\uffc0\001\002\000\014\056\363\077" +
    "\360\100\362\101\357\102\361\001\002\000\024\046\114" +
    "\050\053\051\046\057\050\070\055\071\100\072\062\073" +
    "\104\114\051\001\002\000\024\046\uffac\050\uffac\051\uffac" +
    "\057\uffac\070\uffac\071\uffac\072\uffac\073\uffac\114\uffac\001" +
    "\002\000\024\046\uffae\050\uffae\051\uffae\057\uffae\070\uffae" +
    "\071\uffae\072\uffae\073\uffae\114\uffae\001\002\000\024\046" +
    "\uffab\050\uffab\051\uffab\057\uffab\070\uffab\071\uffab\072\uffab" +
    "\073\uffab\114\uffab\001\002\000\024\046\uffad\050\uffad\051" +
    "\uffad\057\uffad\070\uffad\071\uffad\072\uffad\073\uffad\114\uffad" +
    "\001\002\000\024\046\uffaa\050\uffaa\051\uffaa\057\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\114\uffaa\001\002\000\042" +
    "\053\uffaf\054\uffaf\060\uffaf\072\134\073\135\074\137\075" +
    "\136\076\150\104\146\105\132\106\142\107\144\110\141" +
    "\111\140\112\147\113\143\001\002\000\026\003\366\046" +
    "\uff8f\050\uff8f\051\uff8f\057\uff8f\070\uff8f\071\uff8f\072\uff8f" +
    "\073\uff8f\114\uff8f\001\002\000\054\005\052\011\110\021" +
    "\071\023\101\027\066\035\102\043\061\044\072\045\105" +
    "\046\063\050\053\051\046\057\050\060\377\063\376\064" +
    "\uffbf\070\055\071\100\072\062\073\104\114\051\001\002" +
    "\000\024\046\063\050\053\051\046\057\050\070\055\071" +
    "\100\072\062\073\104\114\051\001\002\000\004\060\371" +
    "\001\002\000\004\063\372\001\002\000\050\005\uff8e\011" +
    "\uff8e\021\uff8e\023\uff8e\027\uff8e\035\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\050\uff8e\051\uff8e\057\uff8e\064\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\114\uff8e\001\002\000\050" +
    "\005\052\011\110\021\071\023\101\027\066\035\102\043" +
    "\061\044\072\045\105\046\063\050\053\051\046\057\050" +
    "\064\uffbf\070\055\071\100\072\062\073\104\114\051\001" +
    "\002\000\004\064\375\001\002\000\054\005\uff8d\006\uff8d" +
    "\011\uff8d\012\uff8d\021\uff8d\023\uff8d\027\uff8d\035\uff8d\043" +
    "\uff8d\044\uff8d\045\uff8d\046\uff8d\050\uff8d\051\uff8d\057\uff8d" +
    "\064\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\114\uff8d\001" +
    "\002\000\050\005\052\011\110\021\071\023\101\027\066" +
    "\035\102\043\061\044\072\045\105\046\063\050\053\051" +
    "\046\057\050\064\uffbf\070\055\071\100\072\062\073\104" +
    "\114\051\001\002\000\004\063\u0102\001\002\000\004\064" +
    "\u0101\001\002\000\054\005\uff8a\006\uff8a\011\uff8a\012\uff8a" +
    "\021\uff8a\023\uff8a\027\uff8a\035\uff8a\043\uff8a\044\uff8a\045" +
    "\uff8a\046\uff8a\050\uff8a\051\uff8a\057\uff8a\064\uff8a\070\uff8a" +
    "\071\uff8a\072\uff8a\073\uff8a\114\uff8a\001\002\000\050\005" +
    "\052\011\110\021\071\023\101\027\066\035\102\043\061" +
    "\044\072\045\105\046\063\050\053\051\046\057\050\064" +
    "\uffbf\070\055\071\100\072\062\073\104\114\051\001\002" +
    "\000\004\064\u0104\001\002\000\054\005\uff8c\006\uff8c\011" +
    "\uff8c\012\uff8c\021\uff8c\023\uff8c\027\uff8c\035\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\050\uff8c\051\uff8c\057\uff8c\064" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\114\uff8c\001\002" +
    "\000\004\064\u0106\001\002\000\054\005\uff8b\006\uff8b\011" +
    "\uff8b\012\uff8b\021\uff8b\023\uff8b\027\uff8b\035\uff8b\043\uff8b" +
    "\044\uff8b\045\uff8b\046\uff8b\050\uff8b\051\uff8b\057\uff8b\064" +
    "\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\114\uff8b\001\002" +
    "\000\054\005\uffbc\006\uffbc\011\uffbc\012\uffbc\021\uffbc\023" +
    "\uffbc\027\uffbc\035\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\050\uffbc\051\uffbc\057\uffbc\064\uffbc\070\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\114\uffbc\001\002\000\016\002\uffe9\007\uffe9" +
    "\024\uffe9\025\uffe9\030\uffe9\041\uffe9\001\002\000\004\054" +
    "\u010a\001\002\000\054\005\uffba\006\uffba\011\uffba\012\uffba" +
    "\021\uffba\023\uffba\027\uffba\035\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\050\uffba\051\uffba\057\uffba\064\uffba\070\uffba" +
    "\071\uffba\072\uffba\073\uffba\114\uffba\001\002\000\036\060" +
    "\u010c\072\134\073\135\074\137\075\136\076\150\104\146" +
    "\105\132\106\142\107\144\110\141\111\140\112\147\113" +
    "\143\001\002\000\042\053\uffdc\054\uffdc\060\uffdc\072\uffdc" +
    "\073\uffdc\074\uffdc\075\uffdc\076\uffdc\104\uffdc\105\uffdc\106" +
    "\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\113\uffdc\001\002" +
    "\000\054\005\uffbd\006\uffbd\011\uffbd\012\uffbd\021\uffbd\023" +
    "\uffbd\027\uffbd\035\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\050\uffbd\051\uffbd\057\uffbd\064\uffbd\070\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\114\uffbd\001\002\000\004\064\u0116\001\002" +
    "\000\064\005\052\007\022\010\010\011\110\021\071\023" +
    "\101\024\006\025\004\027\066\030\011\035\102\041\007" +
    "\043\061\044\072\045\105\046\063\050\053\051\046\057" +
    "\050\064\uffbf\070\055\071\100\072\062\073\104\114\051" +
    "\001\002\000\004\063\u0111\001\002\000\064\005\052\007" +
    "\022\010\010\011\110\021\071\023\101\024\006\025\004" +
    "\027\066\030\011\035\102\041\007\043\061\044\072\045" +
    "\105\046\063\050\053\051\046\057\050\064\uffbf\070\055" +
    "\071\100\072\062\073\104\114\051\001\002\000\004\064" +
    "\u0113\001\002\000\016\002\uffe8\007\uffe8\024\uffe8\025\uffe8" +
    "\030\uffe8\041\uffe8\001\002\000\004\064\u0115\001\002\000" +
    "\016\002\uffe7\007\uffe7\024\uffe7\025\uffe7\030\uffe7\041\uffe7" +
    "\001\002\000\016\002\uffe6\007\uffe6\024\uffe6\025\uffe6\030" +
    "\uffe6\041\uffe6\001\002\000\020\003\016\007\022\010\010" +
    "\024\006\025\004\030\011\041\007\001\002\000\004\002" +
    "\ufff9\001\002\000\010\053\ufff5\054\ufff5\057\026\001\002" +
    "\000\004\002\001\001\002\000\004\046\u011c\001\002\000" +
    "\006\053\ufff0\056\ufff0\001\002\000\006\053\346\056\ufff1" +
    "\001\002\000\004\056\uffef\001\002\000\004\056\u0120\001" +
    "\002\000\024\046\114\050\053\051\046\057\050\070\055" +
    "\071\100\072\062\073\104\114\051\001\002\000\036\054" +
    "\uffee\072\134\073\135\074\137\075\136\076\150\104\146" +
    "\105\132\106\142\107\144\110\141\111\140\112\147\113" +
    "\143\001\002\000\020\003\016\007\022\010\010\024\006" +
    "\025\004\030\011\041\007\001\002\000\004\002\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\022\002\012\003\014\004\011\005\020\006" +
    "\004\007\017\010\016\022\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u011a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\023\007\022\010\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\027\001\001\000\054\003\067\004\011\005\020\006" +
    "\105\014\063\017\043\020\075\021\106\023\076\024\064" +
    "\025\102\026\073\030\u010d\031\044\032\057\035\056\037" +
    "\055\041\074\042\046\046\066\050\072\001\001\000\010" +
    "\003\031\011\032\012\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\033\001\001\000\002\001\001" +
    "\000\006\003\031\011\035\001\001\000\004\013\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\041" +
    "\001\001\000\002\001\001\000\054\003\067\004\011\005" +
    "\020\006\105\014\063\017\043\020\075\021\106\023\076" +
    "\024\064\025\102\026\073\030\053\031\044\032\057\035" +
    "\056\037\055\041\074\042\046\046\066\050\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\u010a\017\043\020\075\021\106" +
    "\050\072\001\001\000\002\001\001\000\004\062\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\115\064\354" +
    "\001\001\000\006\015\132\016\144\001\001\000\042\014" +
    "\063\017\043\020\075\021\106\023\353\024\064\025\102" +
    "\026\073\031\044\032\057\035\056\037\055\041\074\042" +
    "\046\046\066\050\072\001\001\000\020\014\063\017\043" +
    "\020\075\021\106\025\352\026\073\050\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\112\017\043\020\075\021\106\050\072\001\001\000" +
    "\004\063\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\132\016\144\001\001\000\004\061\115\001" +
    "\001\000\004\073\120\001\001\000\004\020\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\063\017" +
    "\043\020\075\021\106\025\122\026\073\050\072\051\121" +
    "\001\001\000\002\001\001\000\004\052\123\001\001\000" +
    "\002\001\001\000\020\014\063\017\043\020\075\021\106" +
    "\025\125\026\073\050\072\001\001\000\004\052\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\151\017\043\020\075\021" +
    "\106\050\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\150\017\043\020\075\021\106\050" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\132\016\144\001\001\000\006\015" +
    "\132\016\144\001\001\000\054\003\067\004\011\005\020" +
    "\006\105\014\063\017\043\020\075\021\106\023\076\024" +
    "\064\025\102\026\073\030\153\031\044\032\057\035\056" +
    "\037\055\041\074\042\046\046\066\050\072\001\001\000" +
    "\002\001\001\000\004\065\155\001\001\000\022\014\063" +
    "\017\043\020\075\021\106\025\161\026\073\033\160\050" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\162\001\001\000\002\001\001\000" +
    "\020\014\063\017\043\020\075\021\106\025\164\026\073" +
    "\050\072\001\001\000\004\034\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\043\201\044\177\045\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\220" +
    "\044\177\045\176\001\001\000\002\001\001\000\010\043" +
    "\217\044\177\045\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\014\063\017\043\020\075\021\106\023\207" +
    "\024\064\025\102\026\073\031\044\032\057\035\056\037" +
    "\055\041\074\042\046\046\066\050\072\001\001\000\042" +
    "\014\063\017\043\020\075\021\106\023\210\024\064\025" +
    "\102\026\073\031\044\032\057\035\056\037\055\041\074" +
    "\042\046\046\066\050\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\014\063\017\043" +
    "\020\075\021\106\023\214\024\064\025\102\026\073\031" +
    "\044\032\057\035\056\037\055\041\074\042\046\046\066" +
    "\050\072\001\001\000\042\014\063\017\043\020\075\021" +
    "\106\023\215\024\064\025\102\026\073\031\044\032\057" +
    "\035\056\037\055\041\074\042\046\046\066\050\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\063\017\043\020\075\021\106" +
    "\023\225\024\064\025\102\026\073\031\044\032\057\035" +
    "\056\037\055\041\074\042\046\046\066\050\072\001\001" +
    "\000\042\014\063\017\043\020\075\021\106\023\226\024" +
    "\064\025\102\026\073\031\044\032\057\035\056\037\055" +
    "\041\074\042\046\046\066\050\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\014\063" +
    "\017\043\020\075\021\106\023\232\024\064\025\102\026" +
    "\073\031\044\032\057\035\056\037\055\041\074\042\046" +
    "\046\066\050\072\001\001\000\042\014\063\017\043\020" +
    "\075\021\106\023\233\024\064\025\102\026\073\031\044" +
    "\032\057\035\056\037\055\041\074\042\046\046\066\050" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\043\236\044\177\045\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\043\242\044\177\045\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\246\001\001\000\042\014\063" +
    "\017\043\020\075\021\106\023\270\024\064\025\102\026" +
    "\073\031\044\032\057\035\056\037\055\041\074\042\046" +
    "\046\066\050\072\001\001\000\020\014\063\017\043\020" +
    "\075\021\106\025\247\026\073\050\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\252\001\001\000" +
    "\042\014\063\017\043\020\075\021\106\023\253\024\064" +
    "\025\102\026\073\031\044\032\057\035\056\037\055\041" +
    "\074\042\046\046\066\050\072\001\001\000\002\001\001" +
    "\000\004\036\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\263\001\001\000\042\014\063\017\043" +
    "\020\075\021\106\023\261\024\064\025\102\026\073\031" +
    "\044\032\057\035\056\037\055\041\074\042\046\046\066" +
    "\050\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\014\063\017\043\020\075\021\106\023\264\024\064" +
    "\025\102\026\073\031\044\032\057\035\056\037\055\041" +
    "\074\042\046\046\066\050\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\063\017\043\020\075\021" +
    "\106\023\277\024\064\025\102\026\073\031\044\032\057" +
    "\035\056\037\055\041\074\042\046\046\066\050\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\272" +
    "\001\001\000\002\001\001\000\042\014\063\017\043\020" +
    "\075\021\106\023\274\024\064\025\102\026\073\031\044" +
    "\032\057\035\056\037\055\041\074\042\046\046\066\050" +
    "\072\001\001\000\002\001\001\000\004\036\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\312\014\063" +
    "\017\043\020\075\021\106\025\313\026\073\040\315\050" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\014\063\017\043\020\075\021\106\023\330\024\064\025" +
    "\102\026\073\031\044\032\057\035\056\037\055\041\074" +
    "\042\046\046\066\050\072\001\001\000\002\001\001\000" +
    "\024\003\312\014\063\017\043\020\075\021\106\025\313" +
    "\026\073\040\317\050\072\001\001\000\002\001\001\000" +
    "\024\003\312\014\063\017\043\020\075\021\106\025\313" +
    "\026\073\040\321\050\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\063\017\043\020\075\021\106" +
    "\023\324\024\064\025\102\026\073\031\044\032\057\035" +
    "\056\037\055\041\074\042\046\046\066\050\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\014\063\017" +
    "\043\020\075\021\106\023\335\024\064\025\102\026\073" +
    "\031\044\032\057\035\056\037\055\041\074\042\046\046" +
    "\066\050\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\063\017\043\020\075\021" +
    "\106\023\333\024\064\025\102\026\073\031\044\032\057" +
    "\035\056\037\055\041\074\042\046\046\066\050\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\341\017" +
    "\043\020\075\021\106\050\072\001\001\000\006\015\132" +
    "\016\144\001\001\000\004\053\343\001\001\000\004\047" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\347\001\001\000\004\047\350\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\355\001\001\000\014\014\363\017\043\020" +
    "\075\021\106\050\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\132\016\144\001\001\000\004\071\366" +
    "\001\001\000\042\014\063\017\043\020\075\021\106\023" +
    "\377\024\064\025\102\026\073\031\044\032\057\035\056" +
    "\037\055\041\074\042\046\046\066\050\072\001\001\000" +
    "\020\014\063\017\043\020\075\021\106\025\367\026\073" +
    "\050\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\372\001\001\000\042\014\063\017\043\020\075" +
    "\021\106\023\373\024\064\025\102\026\073\031\044\032" +
    "\057\035\056\037\055\041\074\042\046\046\066\050\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\063\017\043\020\075\021\106\023\u0104\024\064\025\102" +
    "\026\073\031\044\032\057\035\056\037\055\041\074\042" +
    "\046\046\066\050\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\014\063\017\043\020" +
    "\075\021\106\023\u0102\024\064\025\102\026\073\031\044" +
    "\032\057\035\056\037\055\041\074\042\046\046\066\050" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\132" +
    "\016\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\067\004\011\005\020\006\105" +
    "\014\063\017\043\020\075\021\106\023\076\024\064\025" +
    "\102\026\073\030\u0113\031\044\032\057\035\056\037\055" +
    "\041\074\042\046\046\066\050\072\001\001\000\002\001" +
    "\001\000\054\003\067\004\011\005\020\006\105\014\063" +
    "\017\043\020\075\021\106\023\076\024\064\025\102\026" +
    "\073\030\u0111\031\044\032\057\035\056\037\055\041\074" +
    "\042\046\046\066\050\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\014\004\011\005\020\006\004\007" +
    "\017\010\016\022\u0117\001\001\000\002\001\001\000\004" +
    "\053\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\u011c\001\001\000\004\047\u011d\001\001\000\004" +
    "\056\u011e\001\001\000\002\001\001\000\014\014\u0120\017" +
    "\043\020\075\021\106\050\072\001\001\000\006\015\132" +
    "\016\144\001\001\000\020\003\014\004\011\005\020\006" +
    "\004\007\017\010\016\022\u0122\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<Token> errors = new ArrayList<>();
    public Translator tl = new Translator();

    public void syntax_error(Symbol cur_token){
        errors.add(new Token(cur_token.sym, cur_token.right, cur_token.left, cur_token.value));
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        errors.add(new Token(cur_token.sym, cur_token.right, cur_token.left, cur_token.value));
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= innit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // key_types ::= KEY_INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // key_types ::= KEY_VOID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // key_types ::= KEY_CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // key_types ::= KEY_LONG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // key_types ::= KEY_SHORT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberType(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // innit ::= body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("innit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= declaration OP_SEMICOL body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= error OP_SEMICOL body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= functions_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= const_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberIdVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable_declaration ::= key_types ID NT$0 add_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tl.insertTableVar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberIdVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // add_id ::= OP_COMA ID NT$1 add_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_id",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // add_id ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_id",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberIdVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
tl.insertTableVar();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // const_declaration ::= KEY_CONST key_types ID NT$2 add_id NT$3 OP_ASSIGN expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // functions_block ::= function_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // functions_block ::= function_statement functions_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
tl.initCode();tl.rememberIdFunc(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
tl.insertTableFunc();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_statement ::= key_types ID OP_PAR_OPEN NT$4 parameters OP_PAR_CLOSE NT$5 OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function_statement ::= key_types ID OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_statement ::= key_types ID OP_PAR_OPEN error OP_BRACE_OPEN function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_statement ::= key_types ID OP_PAR_OPEN error function_body OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_body ::= declaration OP_SEMICOL function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_body ::= block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter ::= key_types ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberIdVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameters ::= parameter add_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // add_parameter ::= OP_COMA parameter add_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // add_parameter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_parameter",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression arithmetic_operator expression 
            {
              Object RESULT =null;
		tl.evalBinary();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression logic_operator expression 
            {
              Object RESULT =null;
		tl.evalBinary();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= OP_PAR_OPEN expression OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= ID NT$6 postfix_operator 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tl.evalUnary(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= postfix_operator ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberVar(e, eright, eleft);tl.evalUnary(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= unary_operator expression 
            {
              Object RESULT =null;
		tl.evalUnary(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operand ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operand ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberConst(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operand ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberConst(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operand ::= call_function_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithmetic_operator ::= OP_ADD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithmetic_operator ::= OP_SUB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arithmetic_operator ::= OP_MULT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arithmetic_operator ::= OP_DIV 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arithmetic_operator ::= OP_MOD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logic_operator ::= OP_EQUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logic_operator ::= OP_GRE_EQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logic_operator ::= OP_GREATER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logic_operator ::= OP_LESS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logic_operator ::= OP_LESS_EQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logic_operator ::= OP_NOT_EQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logic_operator ::= OP_OR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logic_operator ::= OP_AND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_operator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // postfix_operator ::= OP_INC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // postfix_operator ::= OP_DEC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unary_operator ::= OP_NOT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unary_operator ::= OP_ADD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unary_operator ::= OP_SUB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // block_statement ::= statement block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // block_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= expression_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= read_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= write_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$7 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.validateBreakContinue(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= KEY_BREAK NT$7 OP_SEMICOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$8 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.validateBreakContinue(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= KEY_CONT NT$8 OP_SEMICOL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= return_statement OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= switch_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression_statement ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression_statement ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tl.rememberVar(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment_expression ::= ID NT$9 assignment_operator expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		tl.assign();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment_operator ::= OP_ADD_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment_operator ::= OP_SUB_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignment_operator ::= OP_MULT_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignment_operator ::= OP_DIV_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignment_operator ::= OP_ASSIGN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tl.rememberOp(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // read_statement ::= KEY_READ OP_PAR_OPEN ID OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // read_statement ::= KEY_READ OP_PAR_OPEN OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // read_statement ::= KEY_READ OP_PAR_OPEN error OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$10 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
tl.startWrite(eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // write_statement ::= KEY_WRITE OP_PAR_OPEN NT$10 write_parameters OP_PAR_CLOSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		tl.endWrite();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // write_statement ::= KEY_WRITE OP_PAR_OPEN error OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // write_parameters ::= expression_statement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // write_parameters_list ::= OP_COMA expression_statement write_parameters_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // write_parameters_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_parameters_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
tl.startIf(eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
tl.testIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if_statement ::= KEY_IF OP_PAR_OPEN NT$11 expression_statement OP_PAR_CLOSE OP_BRACE_OPEN NT$12 block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if_statement ::= KEY_IF OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // if_statement ::= KEY_IF OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_statement ::= KEY_IF OP_PAR_OPEN error block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$13 ::= 
            {
              Object RESULT =null;
tl.startElse();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // else_statement ::= KEY_ELSE OP_BRACE_OPEN NT$13 block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tl.endIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // else_statement ::= KEY_ELSE error block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else_statement ::= 
            {
              Object RESULT =null;
		tl.startElse();tl.endIf();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_statement ::= KEY_FOR OP_PAR_OPEN for_expression_statement OP_SEMICOL for_expression_statement OP_SEMICOL for_expression_statement OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // for_statement ::= KEY_FOR OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_statement ::= KEY_FOR OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // for_statement ::= KEY_FOR OP_PAR_OPEN error block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // for_expression_statement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // for_expression_statement ::= key_types ID OP_ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_expression_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$14 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
tl.startWhile(eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
tl.testWhile();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // while_statement ::= KEY_WHILE OP_PAR_OPEN NT$14 expression_statement OP_PAR_CLOSE OP_BRACE_OPEN NT$15 block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		tl.endWhile();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // while_statement ::= KEY_WHILE OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // while_statement ::= KEY_WHILE OP_PAR_OPEN error OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_statement ::= KEY_WHILE OP_PAR_OPEN error block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN ID OP_PAR_CLOSE OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN error OP_PAR_CLOSE OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN error OP_BRACE_OPEN case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // switch_statement ::= KEY_SWITCH OP_PAR_OPEN error case_blocks OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // case_blocks ::= case case_blocks 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // case_blocks ::= default 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // case_blocks ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_blocks",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // case ::= KEY_CASE INT OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // case ::= KEY_CASE INT OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // case ::= KEY_CASE error OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // case ::= KEY_CASE error OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // default ::= KEY_DEF OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // default ::= KEY_DEF OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // default ::= KEY_DEF error OP_COLON block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // default ::= KEY_DEF error OP_COLON OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // return_statement ::= KEY_RET expression_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // return_statement ::= KEY_RET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$16 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
tl.rememberFunc(e, eright, eleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // call_function_statement ::= ID OP_PAR_OPEN NT$16 input_parameters OP_PAR_CLOSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		tl.validateParams();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_function_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // call_function_statement ::= ID OP_PAR_OPEN error OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_function_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // input_parameters ::= expression_statement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // input_parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_parameters",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // add_input_parameter ::= OP_COMA expression_statement add_input_parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_input_parameter",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // add_input_parameter ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_input_parameter",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
