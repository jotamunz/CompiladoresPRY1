
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package model.compiler.parser;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\002\011\000\002\002\003\000" +
    "\002\017\004\000\002\017\002\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\005" +
    "\006\000\002\006\005\000\002\006\005\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\011\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\015\012\000\002" +
    "\016\006\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\020\003\013\007\014\020\010\024\005\025" +
    "\004\030\007\041\006\001\002\000\004\046\ufffd\001\002" +
    "\000\004\046\000\001\002\000\004\046\uffff\001\002\000" +
    "\004\046\ufffc\001\002\000\004\046\ufffb\001\002\000\004" +
    "\002\125\001\002\000\004\046\015\001\002\000\004\002" +
    "\ufff9\001\002\000\004\046\ufffe\001\002\000\004\057\016" +
    "\001\002\000\004\060\017\001\002\000\004\063\020\001" +
    "\002\000\050\007\014\020\010\023\044\024\005\025\004" +
    "\030\007\041\006\046\032\047\036\050\026\051\030\052" +
    "\035\057\021\064\ufff7\070\040\071\042\072\041\073\034" +
    "\114\031\001\002\000\030\046\050\047\036\050\026\051" +
    "\030\052\035\057\021\070\040\071\042\072\041\073\034" +
    "\114\031\001\002\000\004\054\122\001\002\000\050\007" +
    "\014\020\010\023\044\024\005\025\004\030\007\041\006" +
    "\046\032\047\036\050\026\051\030\052\035\057\021\064" +
    "\ufff7\070\040\071\042\072\041\073\034\114\031\001\002" +
    "\000\004\054\120\001\002\000\004\046\115\001\002\000" +
    "\034\054\uffea\060\uffea\072\uffea\073\uffea\074\uffea\075\uffea" +
    "\076\uffea\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111" +
    "\uffea\001\002\000\050\007\ufff3\020\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\030\ufff3\041\ufff3\046\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\057\ufff3\064\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\073\ufff3\114\ufff3\001\002\000\034\054\uffe8\060\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\104\uffe8\105\uffe8" +
    "\106\uffe8\107\uffe8\110\uffe8\111\uffe8\001\002\000\030\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\057\uffd9\070\uffd9" +
    "\071\uffd9\072\uffd9\073\uffd9\114\uffd9\001\002\000\052\054" +
    "\uffeb\056\106\070\040\071\042\072\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\076\uffeb\077\105\100\107\101\110\102\111\103" +
    "\113\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb" +
    "\001\002\000\004\046\104\001\002\000\030\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\057\uffd7\070\uffd7\071\uffd7" +
    "\072\uffd7\073\uffd7\114\uffd7\001\002\000\034\054\uffe7\060" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\104\uffe7" +
    "\105\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\001\002\000" +
    "\034\054\uffe9\060\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9" +
    "\076\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9\111" +
    "\uffe9\001\002\000\032\054\103\072\053\073\054\074\057" +
    "\075\056\076\065\104\064\105\052\106\062\107\063\110" +
    "\061\111\060\001\002\000\036\046\uffdb\054\uffdb\060\uffdb" +
    "\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\104\uffdb\105" +
    "\uffdb\106\uffdb\107\uffdb\110\uffdb\111\uffdb\001\002\000\030" +
    "\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\057\uffd8\070" +
    "\uffd8\071\uffd8\072\uffd8\073\uffd8\114\uffd8\001\002\000\036" +
    "\046\uffda\054\uffda\060\uffda\072\uffda\073\uffda\074\uffda\075" +
    "\uffda\076\uffda\104\uffda\105\uffda\106\uffda\107\uffda\110\uffda" +
    "\111\uffda\001\002\000\004\064\102\001\002\000\004\057" +
    "\067\001\002\000\034\054\uffec\060\uffec\072\uffec\073\uffec" +
    "\074\uffec\075\uffec\076\uffec\104\uffec\105\uffec\106\uffec\107" +
    "\uffec\110\uffec\111\uffec\001\002\000\030\046\050\047\036" +
    "\050\026\051\030\052\035\057\021\070\040\071\042\072" +
    "\041\073\034\114\031\001\002\000\034\054\uffed\060\uffed" +
    "\072\053\073\054\074\057\075\056\076\065\104\064\105" +
    "\052\106\062\107\063\110\061\111\060\001\002\000\040" +
    "\054\uffeb\060\uffeb\070\040\071\042\072\uffeb\073\uffeb\074" +
    "\uffeb\075\uffeb\076\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb" +
    "\110\uffeb\111\uffeb\001\002\000\034\054\uffef\060\uffef\072" +
    "\uffef\073\uffef\074\uffef\075\uffef\076\uffef\104\uffef\105\uffef" +
    "\106\uffef\107\uffef\110\uffef\111\uffef\001\002\000\030\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\057\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\073\uffe0\114\uffe0\001\002\000\030\046" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\057\uffe6\070\uffe6" +
    "\071\uffe6\072\uffe6\073\uffe6\114\uffe6\001\002\000\030\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\057\uffe5\070\uffe5" +
    "\071\uffe5\072\uffe5\073\uffe5\114\uffe5\001\002\000\030\046" +
    "\050\047\036\050\026\051\030\052\035\057\021\070\040" +
    "\071\042\072\041\073\034\114\031\001\002\000\030\046" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\057\uffe3\070\uffe3" +
    "\071\uffe3\072\uffe3\073\uffe3\114\uffe3\001\002\000\030\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\057\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\114\uffe4\001\002\000\030\046" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\057\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\114\uffdc\001\002\000\030\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\057\uffdd\070\uffdd" +
    "\071\uffdd\072\uffdd\073\uffdd\114\uffdd\001\002\000\030\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\057\uffdf\070\uffdf" +
    "\071\uffdf\072\uffdf\073\uffdf\114\uffdf\001\002\000\030\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\057\uffde\070\uffde" +
    "\071\uffde\072\uffde\073\uffde\114\uffde\001\002\000\030\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\057\uffe1\070\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\114\uffe1\001\002\000\030\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\057\uffe2\070\uffe2" +
    "\071\uffe2\072\uffe2\073\uffe2\114\uffe2\001\002\000\034\054" +
    "\ufff1\060\ufff1\072\053\073\054\074\057\075\056\076\065" +
    "\104\064\105\052\106\062\107\063\110\061\111\060\001" +
    "\002\000\030\046\050\047\036\050\026\051\030\052\035" +
    "\057\021\070\040\071\042\072\041\073\034\114\031\001" +
    "\002\000\032\060\071\072\053\073\054\074\057\075\056" +
    "\076\065\104\064\105\052\106\062\107\063\110\061\111" +
    "\060\001\002\000\004\063\072\001\002\000\050\007\014" +
    "\020\010\023\044\024\005\025\004\030\007\041\006\046" +
    "\032\047\036\050\026\051\030\052\035\057\021\064\ufff7" +
    "\070\040\071\042\072\041\073\034\114\031\001\002\000" +
    "\004\064\074\001\002\000\052\007\uffcd\015\075\020\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\030\uffcd\041\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\057\uffcd\064\uffcd\070\uffcd" +
    "\071\uffcd\072\uffcd\073\uffcd\114\uffcd\001\002\000\004\063" +
    "\077\001\002\000\050\007\uffcf\020\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\030\uffcf\041\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\057\uffcf\064\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\073\uffcf\114\uffcf\001\002\000\050\007\014\020\010\023" +
    "\044\024\005\025\004\030\007\041\006\046\032\047\036" +
    "\050\026\051\030\052\035\057\021\064\ufff7\070\040\071" +
    "\042\072\041\073\034\114\031\001\002\000\004\064\101" +
    "\001\002\000\050\007\uffce\020\uffce\023\uffce\024\uffce\025" +
    "\uffce\030\uffce\041\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\057\uffce\064\uffce\070\uffce\071\uffce\072\uffce\073" +
    "\uffce\114\uffce\001\002\000\004\002\ufffa\001\002\000\050" +
    "\007\ufff5\020\ufff5\023\ufff5\024\ufff5\025\ufff5\030\ufff5\041" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\057\ufff5" +
    "\064\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\114\ufff5\001" +
    "\002\000\034\054\uffee\060\uffee\072\uffee\073\uffee\074\uffee" +
    "\075\uffee\076\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110" +
    "\uffee\111\uffee\001\002\000\030\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\057\uffd5\070\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\114\uffd5\001\002\000\030\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\057\uffd0\070\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\114\uffd0\001\002\000\030\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\057\uffd4\070\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\114\uffd4\001\002\000\030\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\057\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\114\uffd3\001\002\000\030\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\057\uffd2\070\uffd2\071\uffd2\072\uffd2\073" +
    "\uffd2\114\uffd2\001\002\000\030\046\050\047\036\050\026" +
    "\051\030\052\035\057\021\070\040\071\042\072\041\073" +
    "\034\114\031\001\002\000\030\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\057\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\114\uffd1\001\002\000\032\054\uffd6\072\053\073\054" +
    "\074\057\075\056\076\065\104\064\105\052\106\062\107" +
    "\063\110\061\111\060\001\002\000\004\056\116\001\002" +
    "\000\030\046\050\047\036\050\026\051\030\052\035\057" +
    "\021\070\040\071\042\072\041\073\034\114\031\001\002" +
    "\000\032\054\ufff2\072\053\073\054\074\057\075\056\076" +
    "\065\104\064\105\052\106\062\107\063\110\061\111\060" +
    "\001\002\000\050\007\ufff4\020\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\030\ufff4\041\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\057\ufff4\064\ufff4\070\ufff4\071\ufff4\072\ufff4\073" +
    "\ufff4\114\ufff4\001\002\000\004\064\ufff8\001\002\000\050" +
    "\007\ufff6\020\ufff6\023\ufff6\024\ufff6\025\ufff6\030\ufff6\041" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\057\ufff6" +
    "\064\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\114\ufff6\001" +
    "\002\000\032\060\124\072\053\073\054\074\057\075\056" +
    "\076\065\104\064\105\052\106\062\107\063\110\061\111" +
    "\060\001\002\000\034\054\ufff0\060\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\075\ufff0\076\ufff0\104\ufff0\105\ufff0\106\ufff0\107" +
    "\ufff0\110\ufff0\111\ufff0\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\002\010\003\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\024\004\022\005" +
    "\021\006\036\010\044\011\023\013\032\014\045\015\026" +
    "\017\042\001\001\000\012\006\122\010\044\013\032\014" +
    "\045\001\001\000\002\001\001\000\026\003\024\004\022" +
    "\005\021\006\036\010\044\011\023\013\032\014\045\015" +
    "\026\017\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\111\013\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\046\010\044\013\032" +
    "\014\045\001\001\000\004\007\054\001\001\000\004\013" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\065\010\044\013" +
    "\032\014\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\054\001\001\000\012\006\067\010\044\013\032\014" +
    "\045\001\001\000\004\007\054\001\001\000\002\001\001" +
    "\000\026\003\024\004\022\005\021\006\036\010\044\011" +
    "\023\013\032\014\045\015\026\017\072\001\001\000\002" +
    "\001\001\000\004\016\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\024\004\022\005\021\006\036" +
    "\010\044\011\023\013\032\014\045\015\026\017\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\113\010\044\013\032\014\045\001" +
    "\001\000\002\001\001\000\004\007\054\001\001\000\002" +
    "\001\001\000\012\006\116\010\044\013\032\014\045\001" +
    "\001\000\004\007\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\054\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= innit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // key_types ::= KEY_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // key_types ::= KEY_VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // key_types ::= KEY_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // key_types ::= KEY_LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // key_types ::= KEY_SHORT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // key_types ::= KEY_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_types",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // innit ::= key_types ID OP_PAR_OPEN OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("innit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // innit ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("innit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block_statement ::= statement block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // block_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= declaration OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= expression OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= assignment_expression OP_SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= key_types ID OP_ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= expression operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= OP_PAR_OPEN expression OP_PAR_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= ID postfix_operator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= postfix_operator ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= unary_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= operand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operand ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operand ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operand ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operand ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operator ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operator ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operator ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operator ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operator ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operator ::= OP_EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operator ::= OP_GRE_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operator ::= OP_GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operator ::= OP_LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operator ::= OP_LESS_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operator ::= OP_NOT_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // postfix_operator ::= OP_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // postfix_operator ::= OP_DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_operator",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unary_operator ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unary_operator ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unary_operator ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment_expression ::= ID assignment_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignment_operator ::= OP_ADD_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assignment_operator ::= OP_SUB_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assignment_operator ::= OP_MULT_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment_operator ::= OP_DIV_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment_operator ::= OP_MOD_ASS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment_operator ::= OP_ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_statement ::= KEY_IF OP_PAR_OPEN expression OP_PAR_CLOSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE else_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_statement ::= KEY_ELSE OP_BRACE_OPEN block_statement OP_BRACE_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
